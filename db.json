{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1508927246649},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1508927246649},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1508927246649},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1508927246651},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1508927246651},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1508927246652},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1508927246652},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1508927246652},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1508927246653},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1508927246653},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1508927246653},{"_id":"themes/next/README.md","hash":"225962d533233395f5c57606de1b8585821354d9","modified":1508927246654},{"_id":"themes/next/bower.json","hash":"47471a8f13528dc4052b746db5b4be2375682173","modified":1508927246655},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1508927246655},{"_id":"themes/next/_config.yml","hash":"58e8bf5b7354e3f4293baae2b7aecd6b29ff1acc","modified":1508927246654},{"_id":"themes/next/package.json","hash":"92a106da76a9b436593fe468d076972b550c8ca2","modified":1508927246687},{"_id":"source/_posts/Raft-PartA.md","hash":"40499f7a5d3d176b2ab6d06eb890258e8ff62ae8","modified":1508927246608},{"_id":"source/categories/index.md","hash":"90bd748f5345df95c2e1a365009ff3041c9a2149","modified":1508927246610},{"_id":"source/_posts/the-concurrency-on-go.md","hash":"63bdbea4c09c953900a96cbd8a9d9cc355cf42fc","modified":1508941573582},{"_id":"source/tags/index.md","hash":"b87c0b6a20fda691467885724c9edf2b7fdcb50a","modified":1508927246610},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1508927246650},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1508927246650},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1508927246651},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1508927246651},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1508927246655},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1508927246656},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1508927246656},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1508927246657},{"_id":"themes/next/languages/en.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1508927246656},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1508927246658},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1508927246657},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1508927246658},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1508927246658},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1508927246688},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1508927246659},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1508927246689},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1508927246659},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23817934c6bf7a59a494743777526b8c8ae3350d","modified":1508927246660},{"_id":"themes/next/languages/zh-hk.yml","hash":"19fb3c159fa6f4d58237e5a1a3857048a6add9a6","modified":1508927246660},{"_id":"themes/next/languages/zh-tw.yml","hash":"64a16181fcc3779ea335792c22fda3b5202e3e9e","modified":1508927246660},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1508927246800},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1508927246801},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1508927246801},{"_id":"themes/next/layout/_layout.swig","hash":"7bf52e714d445d253d13fc36fc7463096885e81b","modified":1508927246662},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1508927246686},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1508927246687},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1508927246685},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1508927246686},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1508927246685},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1508927246687},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1508927246686},{"_id":"source/_posts/Raft-PartA/election.png","hash":"68402d39dd3eca68e3463400a32e51e081ffb8a8","modified":1508927246609},{"_id":"source/_posts/Raft-PartA/raft.png","hash":"a8d000abdb9a75caec7585ad6853b68aa779a89a","modified":1508927246609},{"_id":"source/_posts/the-concurrency-on-go/no_sleep_1.png","hash":"107bec997191699c00694efa1e6056ee90b2ca4e","modified":1508930097089},{"_id":"source/_posts/the-concurrency-on-go/all_1.png","hash":"8d5f7fb886dd9d0186e50416d3e7077f1299ae58","modified":1508931187860},{"_id":"source/_posts/the-concurrency-on-go/test4.png","hash":"7345fe9a1dd1dad0951ab3240b8965afd71ec754","modified":1508935834821},{"_id":"source/_posts/the-concurrency-on-go/test5.png","hash":"4caa30ac40507796014769480df6524577a6590d","modified":1508938313290},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508927246732},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1508927246689},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1508927246690},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1508927246691},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1508927246690},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1508927246691},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1508927246692},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1508927246691},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1508927246692},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1508927246692},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1508927246732},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1508927246661},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1508927246662},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1508927246733},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1508927246733},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1508927246734},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1508927246734},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1508927246735},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1508927246735},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1508927246736},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1508927246738},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1508927246738},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508927246738},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1508927246736},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1508927246737},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508927246739},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1508927246737},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1508927246738},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1508927246670},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1508927246740},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1508927246739},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1508927246740},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1508927246671},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1508927246673},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1508927246663},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1508927246662},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1508927246664},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1508927246663},{"_id":"themes/next/layout/_macro/post.swig","hash":"9896b34a7edc112c03b393a1602a616710a66ae1","modified":1508927246663},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b9f9959225876fb56fb3fba96306d19396e704d4","modified":1508927246664},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1508927246681},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1508927246681},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1508927246681},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1508927246681},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1508927246682},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1508927246682},{"_id":"themes/next/layout/_partials/comments.swig","hash":"8005c3a585209a788e8a17f848faa482dd1a3be5","modified":1508927246665},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1508927246667},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1508927246668},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1508927246666},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1508927246665},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1508927246665},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1508927246667},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508927246720},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508927246720},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508927246721},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508927246731},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508927246732},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508927246672},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508927246672},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1508927246720},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1508927246721},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1508927246720},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1508927246719},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1508927246730},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1508927246730},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cefa0189bd928b0b35b25fd5264b127828a469ca","modified":1508927246731},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4fcfd48c7fce88ae3a0efa027bf739b8fad5437f","modified":1508927246731},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1508927246755},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1508927246742},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1508927246741},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1508927246742},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1508927246741},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1508927246744},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1508927246742},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1508927246743},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1508927246744},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1508927246743},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1508927246745},{"_id":"themes/next/source/js/src/utils.js","hash":"d6ce6939c9bd9a7e2ef1d8b15c836cbed02d715f","modified":1508927246745},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1508927246752},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1508927246763},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1508927246755},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1508927246764},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1508927246763},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1508927246764},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1508927246779},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1508927246766},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1508927246766},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1508927246767},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1508927246767},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1508927246766},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1508927246783},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1508927246783},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1508927246783},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1508927246784},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1508927246784},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1508927246784},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1508927246784},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1508927246785},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1508927246785},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1508927246786},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1508927246785},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1508927246786},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1508927246786},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1508927246787},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1508927246780},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1508927246781},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1508927246781},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1508927246781},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1508927246782},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1508927246782},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1508927246789},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1508927246787},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1508927246788},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1508927246795},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1508927246796},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1508927246799},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1508927246799},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1508927246800},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1508927246671},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1508927246672},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1508927246673},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1508927246674},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1508927246675},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1508927246674},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1508927246676},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1508927246676},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1508927246676},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1508927246677},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1508927246675},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1508927246677},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1508927246674},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1508927246676},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1508927246677},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1508927246678},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1508927246678},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1508927246680},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1508927246679},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1508927246680},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1508927246679},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1508927246680},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1508927246679},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1508927246685},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1508927246684},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1508927246683},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1508927246666},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1508927246668},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1508927246669},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1508927246668},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1508927246669},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1508927246666},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1508927246684},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1508927246670},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1508927246669},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1508927246670},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1508927246780},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1508927246717},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1508927246717},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1508927246718},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1508927246718},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1508927246717},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1508927246718},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1508927246694},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1508927246694},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1508927246694},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1508927246695},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1508927246716},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1508927246694},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1508927246700},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1508927246709},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1508927246728},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1508927246729},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1508927246722},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1508927246729},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1508927246730},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1508927246728},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1508927246726},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1508927246726},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1508927246726},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1508927246722},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1508927246727},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"798efe02a4bf52d8820f99a5a458cd3d8ad3c3cc","modified":1508927246729},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1508927246727},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1508927246723},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1508927246723},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1508927246724},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1508927246723},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1508927246724},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"643eb1ad5bef63e1f5eff13ed33fc7b21111189e","modified":1508927246724},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1508927246744},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1508927246749},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1508927246757},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1508927246751},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1508927246751},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1508927246757},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1508927246758},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1508927246758},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1508927246758},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1508927246759},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1508927246763},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1508927246761},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1508927246762},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1508927246765},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1508927246765},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1508927246768},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1508927246769},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1508927246768},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1508927246683},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1508927246794},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1508927246794},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1508927246683},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1508927246750},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508927246778},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1508927246798},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508927246778},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1508927246695},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1508927246699},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1508927246698},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1508927246700},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1508927246699},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1508927246699},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1508927246696},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1508927246698},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1508927246698},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1508927246696},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1508927246697},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1508927246696},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1508927246700},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"27b7326fa3bb09e9473f349984bfe69aa17277d2","modified":1508927246701},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1508927246702},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1508927246697},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1508927246701},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1508927246702},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1508927246704},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1508927246701},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1508927246702},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1508927246704},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1508927246703},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1508927246704},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1508927246703},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1508927246703},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1508927246705},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1508927246704},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1508927246706},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1508927246707},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1508927246706},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1508927246706},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1508927246707},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1508927246708},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681f8b41599964a6c60bd341f46cb15efc20423b","modified":1508927246705},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1508927246709},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1508927246710},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1508927246708},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1508927246708},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1508927246709},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1508927246710},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1508927246711},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1508927246711},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1508927246710},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1508927246712},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1508927246711},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1508927246713},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1508927246712},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1508927246714},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1508927246714},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1508927246712},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1508927246715},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1508927246713},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1508927246715},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1508927246728},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1508927246714},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1508927246715},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1508927246725},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1508927246725},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1508927246747},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1508927246746},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1508927246748},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1508927246747},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1508927246748},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1508927246759},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1508927246760},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1508927246760},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1508927246760},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1508927246761},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508927246770},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1508927246761},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508927246772},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508927246776},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1508927246754},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1508927246793},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1508927246775},{"_id":"public/categories/index.html","hash":"c41b5268b86aa194ecac7b4e08871d976dc22830","modified":1508977638353},{"_id":"public/archives/index.html","hash":"2f75553140072a3db19dc8679047d7750aeaee39","modified":1508977638353},{"_id":"public/tags/index.html","hash":"e5b2f934dd187743bba4bb7339f66bb156902518","modified":1508977638353},{"_id":"public/archives/2017/index.html","hash":"cfcfeaa364c1c98fa8ff0805d6bd2a5c36f0c9ce","modified":1508977638353},{"_id":"public/archives/2017/10/index.html","hash":"00941b1f8767c360f8e65f2b736e58f8bdc88321","modified":1508977638353},{"_id":"public/tags/raft/index.html","hash":"51469c3ada2806de3cccf76afe576d57463f8ea5","modified":1508977638353},{"_id":"public/tags/golang/index.html","hash":"c0bd07295bb35de2b43df6ad56951b65cc78088d","modified":1508977638353},{"_id":"public/categories/分布式系统/index.html","hash":"0da28d0419d18f3e36c2ae097ecf1701afc77975","modified":1508977638353},{"_id":"public/categories/分布式系统/MIT-6-824/index.html","hash":"7343ba697af343883a63d906d5b6aa1128a67384","modified":1508977638353},{"_id":"public/index.html","hash":"8f7e13b6e41cae17474561fcdcc271c7b1545765","modified":1508977638353},{"_id":"public/tags/concurrency/index.html","hash":"b7e0b69aa8fc27117603c2c7bfbfc358fec004a7","modified":1508977638353},{"_id":"public/categories/golang/index.html","hash":"bc13b18d8794872a0f0cdbe200a8129e79b1a579","modified":1508977638353},{"_id":"public/2017/10/25/the-concurrency-on-go/index.html","hash":"dcdddb98105ba7b25de1f87aae9924d57e6cbdeb","modified":1508977638353},{"_id":"public/2017/10/22/Raft-PartA/index.html","hash":"cb54fc89772d1a793358f2632e3739ff174f294d","modified":1508977638353},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1508977638373},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1508977638373},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1508977638373},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1508977638373},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1508977638373},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1508977638373},{"_id":"public/images/favicon-16x16.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1508977638373},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1508977638373},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508977638373},{"_id":"public/images/favicon-32x32.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1508977638373},{"_id":"public/images/apple-touch-icon.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1508977638373},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1508977638373},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1508977638373},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1508977638373},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1508977638373},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1508977638373},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1508977638373},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508977638373},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1508977638373},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1508977638373},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1508977639005},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1508977639005},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1508977639015},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1508977639015},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1508977639015},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1508977639015},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1508977639015},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1508977639015},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1508977639015},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1508977639015},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1508977639015},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1508977639015},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1508977639015},{"_id":"public/2017/10/25/the-concurrency-on-go/no_sleep_1.png","hash":"107bec997191699c00694efa1e6056ee90b2ca4e","modified":1508977639015},{"_id":"public/2017/10/25/the-concurrency-on-go/all_1.png","hash":"8d5f7fb886dd9d0186e50416d3e7077f1299ae58","modified":1508977639015},{"_id":"public/2017/10/25/the-concurrency-on-go/test4.png","hash":"7345fe9a1dd1dad0951ab3240b8965afd71ec754","modified":1508977639015},{"_id":"public/2017/10/25/the-concurrency-on-go/test5.png","hash":"4caa30ac40507796014769480df6524577a6590d","modified":1508977639015},{"_id":"public/2017/10/22/Raft-PartA/election.png","hash":"68402d39dd3eca68e3463400a32e51e081ffb8a8","modified":1508977639015},{"_id":"public/2017/10/22/Raft-PartA/raft.png","hash":"a8d000abdb9a75caec7585ad6853b68aa779a89a","modified":1508977639015},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1508977639025},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1508977639035},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1508977639045},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1508977639045},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1508977639045},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1508977639045},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1508977639045},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1508977639045},{"_id":"public/js/src/utils.js","hash":"6b0eeeb9dda4a7c94c1c4f6fafd2c801da6e8f96","modified":1508977639045},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1508977639045},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1508977639045},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1508977639045},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1508977639045},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1508977639045},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1508977639045},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1508977639045},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1508977639045},{"_id":"public/css/main.css","hash":"614c379f49dc47691153fb29fe869e7091591a26","modified":1508977639045},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508977639045},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1508977639045},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1508977639045},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1508977639045},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1508977639045},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1508977639045},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1508977639045},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1508977639045},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1508977639045},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1508977639045},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1508977639045},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1508977639045},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1508977639045},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1508977639045},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1508977639045},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1508977639045},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1508977639045},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1508977639045},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1508977639045},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1508977639045},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1508977639045},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1508977639045},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1508977639045},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1508977639045},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1508977639045},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1508977639045},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1508977639045},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1508977639045},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1508977639045},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1508977639045},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1508977639045},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1508977639045},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1508977639045},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1508977639045},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1508977639045},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1508977639045},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1508977639045},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1508977639045},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1508977639045},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508977639045},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508977639045},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508977639045},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1508977639055}],"Category":[{"name":"分布式系统","_id":"cj97qboen0002nsuminapah4s"},{"name":"MIT 6.824","parent":"cj97qboen0002nsuminapah4s","_id":"cj97qboen0005nsum2alm8gp8"},{"name":"golang","_id":"cj97qbofr000cnsumeq3ltpxp"}],"Data":[],"Page":[{"title":"categories","date":"2017-10-19T06:16:14.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-10-19 14:16:14\ntype: \"categories\"\n---\n","updated":"2017-10-25T10:27:26.610Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj97qboen0001nsum06n6cuje","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2017-10-19T06:15:50.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ndate: 2017-10-19 14:15:50\n---\n","updated":"2017-10-25T10:27:26.610Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj97qbofr000bnsum23qivodr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Raft-PartA","date":"2017-10-22T10:39:29.000Z","_content":"本次的实验为MIT6.824 Distribute System 中 Lab2 raft part A,通过课程所给的代码的骨架，要求实验raft中选举部分的功能。由于我的水平较渣，觉得课程的难度较大，与其说是实验比如说是对Github上的大神的代码进行理解，并结合论文进行思考。希望有朝一日能够自己做出一个实验啊！\n\n> Implement leader election and heartbeats (`AppendEntries` RPCs with no log entries). The goal for Part 2A is for a single leader to be elected, for the leader to remain the leader if there are no failures, and for a new leader to take over if the old leader fails or if packets to/from the old leader are lost. Run `go test -run 2A` to test your 2A code.\n\nPart A 部分要求实现raft的选举功能，其中raft中的每一个server都会维护自己的一个raft的结构体，其中只有两种RPC：`AppendEntries RPC` 和 `RequestVote RPC`。其中当`AppendEntres RPC`中的log为空时用作`HeartBeat`维护server 和 follower之间的通信，而`RequestVote RPC`则用作当follower转变成candidate时，向其他的server请求投票时的通信。整个选举的过程可以概括为下面的这张图，而其中又有许多的细节需要结合论文中的Figure 2中的每一个条件实现；\n\n{% asset_image election.png election%}\n## 可以概括为如下几个步骤\n1. 系统初始化时，所有的server都是FLLOWER状态,并维护一个计时器，计时结束会成为CANDIDATE并开始选举；FOLLOWER每当收到一次`Herat Beat`或`RequestVote RPC`时重置计时器；\n2. CANDIDATE在选举的时候依旧会维护一个计时器向所有的SERVER发送`Request Vote`，在结束时仍未选举完，重新开始选举。当CANDIDATE获得大部分的投票后变为LEADER;在选举的过程中若收到来自更新的term的`AppendEntries RPC`或者自己的term小于其他server的term时，转变为FOLLOWER；\n3. LEADER开始广播`Heart Beat`包，广播自己成为LEADER的事实，并且维护和FOLLOWER之间的通信。当发现FOLLOWER的reply中有更高的term时转变为FOLLOWER；\n\n## 代码解析\n\n\n### 定义一些常量\n``` go\nconst (\n\tFOLLOWER = iota\n\tCANDIDATE\n\tLEADER\n\n\tHEARTBEAT_INTERVAL    = 100\n\tMIN_ELECTION_INTERVAL = 400\n\tMAX_ELECTION_INTERVAL = 500\n)\n```\n### 创建必要的结构体\nraft相当于server中的state machine\n``` go\ntype Raft struct {\n\tmu        sync.Mutex          // Lock to protect shared access to this peer's state\n\tpeers     []*labrpc.ClientEnd // RPC end points of all peers\n\tpersister *Persister          // Object to hold this peer's persisted state\n\tme        int                 // this peer's index into peers[]\n\n\t// Your data here (2A, 2B, 2C).\n\t// Look at the paper's Figure 2 for a description of what\n\t// state a Raft server must maintain.\n\n\tvotedFor     int   //投票给某个CANDIDATE id\n\tvoteAcquired int   //收到的票数总数，用于判断能否成为LEADER\n\tstate        int32 //server当前的状态\n\tcurrentTerm  int32 //server当前的term\n\n\tvoteCh   chan struct{} //由于是并行发送用于指示server收到VoteRequest后的操作\n\tappendCh chan struct{} //收到Append Entries后的操作\n\n\telectionTimer *time.Timer //用于FOLLOWER和CANDIDATE的操作\n}\n```\n发送`RequestVote RPC`包中的内容\n```go\ntype RequestVoteArgs struct {\n\tTerm        int32\n\tCandidateId int\n}\n```\nserver对于`RequestVote RPC`包的回复\n```go\ntype RequestVoteReply struct {\n\t// Your data here (2A).\n\tTerm        int32\n\tVoteGranted bool\n}\n```\n发送`AppendEntries RPC`包中的内容\n```go\n//此处只涉及选举，不考虑replication及log中的内容\ntype AppendEntriesArgs struct {\n\tTerm     int32\n\tLeaderID int\n}\n```\n接收`AppendEntries RPC`包，并回复\n同样这里不考虑CANDIDATE中的log是否是最新的，只要有合适的`VoteReuest PRC`就投票\n```go\ntype AppendEntriesReply struct {\n\tTerm    int32\n\tSuccess bool\n}\n```\n###一些重要的工具函数\n\n\n```go\nfunc (rf *Raft) getTerm() int32 {\n\treturn atomic.LoadInt32(&rf.currentTerm)\n}\n\nfunc (rf *Raft) incrementTerm() int32 {\n\treturn atomic.AddInt32(&rf.currentTerm, 1)\n}\n\nfunc (rf *Raft) isState(state int32) bool {\n\treturn atomic.LoadInt32(&rf.state) == state\n}\n\nfunc (rf *Raft) GetState() (int, bool) {\n\n\tvar term int\n\tvar isleader bool\n\t// Your code here (2A).\n\tterm = int(rf.getTerm())\n\tisleader = rf.isState(LEADER)\n\treturn term, isleader\n}\n\nfunc randElectionDuration() time.Duration {\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\treturn time.Millisecond * time.Duration(\n    \t\t\tr.Int63n(MAX_ELECTION_INTERVAL-MIN_ELECTION_INTERVAL)+MIN_ELECTION_INTERVAL\n       \t)\n}\n```\n\n### CANDIDATE发送`RequestVote RPC`包\n用于CANDIDATE发送包和对reply的处理\n\n- 遍历每一个server，若投票了则voteGranted自增1\n- 若发现reply中的term大于自身当前的term，则转变为FOLLOWER\n\n```go\nfunc (rf *Raft) broadcastVoteReq() {\n\targs := RequestVoteArgs{Term: atomic.LoadInt32(&rf.currentTerm), CandidateId: rf.me}\n\tfor i, _ := range rf.peers {\n\t\tif i == rf.me {\n\t\t\tcontinue\n\t\t}\n\t\t// is it is candidate then send vote req\n\t\tgo func(server int) {\n\t\t\tvar reply RequestVoteReply\n\t\t\tif rf.isState(CANDIDATE) && rf.sendRequestVote(server, &args, &reply) {\n\t\t\t\trf.mu.Lock()\n\t\t\t\tdefer rf.mu.Unlock()\n\t\t\t\t//deal with the reply\n\t\t\t\tif reply.VoteGranted {\n\t\t\t\t\trf.voteAcquired += 1\n\t\t\t\t} else {\n\t\t\t\t\tif reply.Term > rf.currentTerm {\n\t\t\t\t\t\trf.currentTerm = reply.Term\n\t\t\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Server %d send vote req failed.\\n\", rf.me)\n\t\t\t}\n\t\t}(i)\n\t}\n}\n```\n\n\n### server对`RequestVote RPC`的处理\n依据论文Figure 2中的要求，有以下几个处理的要点：\n- 判断自身的term是否大于CANDIDATE的term，若是则拒绝投票，并更新reply中的term\n- 若当前的term小于CANDIDATE发送的term，更新自身的term，并将自己的状态变为follower（当前状态为CANDIDATE或LEADER）\n- 当两者的term相等时，必须是初始状态，否则拒绝投票（FOLLOWER转变为CANDIDATE时候term自增1，因此必须大于其他server）\n- 投票成功后，利用信道通知主循环（整个操作是并行的）\n\n\n```go\nfunc (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {\n\t// Your code here (2A, 2B).\n\trf.mu.Lock()\n\tdefer rf.mu.Unlock()\n\tif args.Term < rf.currentTerm {\n\t\treply.VoteGranted = false\n\t\treply.Term = rf.currentTerm\n\t} else if args.Term > rf.currentTerm {\n\t\trf.currentTerm = args.Term\n\t\trf.updateStateTo(FOLLOWER)\n\t\trf.votedFor = args.CandidateId\n\t\treply.VoteGranted = true\n\t} else {\n\t\tif rf.votedFor == -1 {\n\t\t\trf.votedFor = args.CandidateId\n\t\t\treply.VoteGranted = true\n\t\t} else {\n\t\t\treply.VoteGranted = false\n\t\t}\n\t}\n\tif reply.VoteGranted == true {\n\t\tgo func() { rf.voteCh <- struct{}{} }()\n\t}\n}\n```\n\n\n### LEADER广播`AppendEntries RPC`，和对reply的处理\n\n由于这里只是单纯的选举所以处理的逻辑很简单，只处理失败的回复：\n\n- 如果reply中的term大于当前LEADER中的term，则LEADER将自己的状态变成FOLLOWER\n\n\n```go\nfunc (rf *Raft) broadcastAppendEnrties() {\n\targs := AppendEntriesArgs{Term: atomic.LoadInt32(&rf.currentTerm), LeaderID: rf.me}\n\tfor i, _ := range rf.peers {\n\t\tif i == rf.me {\n\t\t\tcontinue\n\t\t}\n\t\tgo func(server int) {\n\t\t\tvar reply AppendEntriesReply\n\t\t\tif rf.isState(LEADER) && rf.sendAppendEntries(server, &args, &reply) {\n\t\t\t\trf.mu.Lock()\n\t\t\t\tdefer rf.mu.Unlock()\n\t\t\t\tif reply.Success {\n\n\t\t\t\t} else {\n\t\t\t\t\tif reply.Term > rf.currentTerm {\n\t\t\t\t\t\trf.currentTerm = reply.Term\n\t\t\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}\n```\n\n### server对`AppendEntries RPC`的处理\n同样，raft中的term可以作为判断是不是最新的依据，根据Figure 2，server在处理`AppendEntries RPC`，有如下注意点：\n- 如果`args.Term < rf.currentTerm`，`reply.Term = rf.currentTerm`;\n- 如果`args.Term > rf.currentTerm`，更新当前的term并且将状态改变为FOLLOWER（针对当前状态为CANDIDATE的server）\n\n\n```go\nfunc (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {\n\trf.mu.Lock()\n\tdefer rf.mu.Unlock()\n\t//deal with the msg and reply\n\tif args.Term < rf.currentTerm {\n\t\treply.Success = false\n\t\treply.Term = rf.currentTerm\n\t} else if args.Term > rf.currentTerm {\n\t\trf.currentTerm = args.Term\n\t\trf.updateStateTo(FOLLOWER)\n\t\treply.Success = true\n\t} else {\n\t\treply.Success = true\n\t}\n\tgo func() {\n\t\trf.appendCh <- struct{}{}\n\t}()\n}\n```\n\n\n### 状态转变的函数\n\n需要注意的是当转变成FOLLOWER时，要将自己的`VoteFor`初始化为-1，当转变成CANDIDATE时候要注意开始选举LEADER\n```go\nfunc (rf *Raft) updateStateTo(state int32) {\n\tif rf.isState(state) {\n\t\treturn\n\t}\n\tstateDesc := []string{\"FOLLOWER\", \"CANDIDATE\", \"LEADER\"}\n\tpreState := rf.state\n\tswitch state {\n\tcase FOLLOWER:\n\t\trf.state = FOLLOWER\n\t\trf.votedFor = -1\n\tcase CANDIDATE:\n\t\trf.state = CANDIDATE\n\t\trf.startElection()\n\tcase LEADER:\n\t\trf.state = LEADER\n\tdefault:\n\t\tfmt.Printf(\"Warning: invalid state %d, do nothing.\\n\", state)\n\t}\n\tfmt.Printf(\"In term %d: Server %d transfer from %s to %s\\n\",\n\t\trf.currentTerm, rf.me, stateDesc[preState], stateDesc[rf.state])\n\n}\n```\n### 开始新一轮选举的函数\n按照论文的要求在开始选举新的LEADER的时候要重置计时器，因为CANDIDATE会为自己投票所以票数初始置为1\n```go\nfunc (rf *Raft) startElection() {\n\trf.incrementTerm()  //first increase current term\n\trf.votedFor = rf.me //vote for self\n\trf.voteAcquired = 1 //acquire self's vote\n\trf.electionTimer.Reset(randElectionDuration())\n\trf.broadcastVoteReq()\n}\n```\n\n#### 整个状态的循环实现\n不断的循环，并根据当前server的角色进行不同的操作\n\n\n#### FOLLOWER\n\n\n- 当收到CANDIDATE发送的`VoteRequest RPC`时，重置计时器\n- 当收到LEADER发送的`AppendEntries RPC`时，重置计时器\n- 当计时器结束时，说明当前的server断绝联系，于是FOLLOWER转变为CANDIDATE开始新一轮的选举\n\n\n#### CANDIDATE\n- 在收到`AppendEntries RPC`时，说明LEADER依旧存在，停止选举转变为FOLLOWER\n- 当计时器结束时，重新开始选举\n- 当投票数大于总数的一半时，当选LEADER\n\n\n#### LEADER\n- 间隔一段时间发送`HeartBeat`心跳包维持LEADER和其他的server的通信\n\n\n```go\nfunc (rf *Raft) startLoop() {\n\trf.electionTimer = time.NewTimer(randElectionDuration())\n\tfor {\n\t\tswitch atomic.LoadInt32(&rf.state) {\n\t\tcase FOLLOWER:\n\t\t\tselect {\n\t\t\tcase <-rf.voteCh:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\tcase <-rf.appendCh:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\tcase <-rf.electionTimer.C:\n\t\t\t\t//time out\n\t\t\t\trf.mu.Lock()\n\t\t\t\trf.updateStateTo(CANDIDATE)\n\t\t\t\trf.mu.Unlock()\n\t\t\t}\n\t\tcase CANDIDATE:\n\t\t\trf.mu.Lock()\n\t\t\tselect {\n\t\t\tcase <-rf.appendCh:\n\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\tcase <-rf.electionTimer.C:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\t\trf.startElection()\n\t\t\tdefault:\n\t\t\t\tif rf.voteAcquired > len(rf.peers)/2 {\n\t\t\t\t\trf.updateStateTo(LEADER)\n\t\t\t\t}\n\t\t\t}\n\t\t\trf.mu.Unlock()\n\t\tcase LEADER:\n\t\t\trf.broadcastAppendEnrties()\n\t\t\ttime.Sleep(HEARTBEAT_INTERVAL * time.Millisecond)\n\t\t}\n\n\t}\n```\n\n### 初始化并开始循环\n```go\nfunc Make(peers []*labrpc.ClientEnd, me int,\n\tpersister *Persister, applyCh chan ApplyMsg) *Raft {\n\trf := &Raft{}\n\trf.peers = peers\n\trf.persister = persister\n\trf.me = me\n\n\t// Your initialization code here (2A, 2B, 2C).\n\trf.state = FOLLOWER\n\trf.votedFor = -1\n\trf.voteCh = make(chan struct{})\n\trf.appendCh = make(chan struct{})\n\n\t// initialize from state persisted before a crash\n\trf.readPersist(persister.ReadRaftState())\n\n\tgo rf.startLoop()\n\n\treturn rf\n}\n```\n\n## 总结\n\n---\n第一次将论文中的算法“实现”，虽然是参考了大神的代码，还是觉得收获满满。\n首先，纠正了我看论文一目十行的方法，以前总觉得论文这东西太虚，只是所谓的想法，经过这次无数遍的研读之后，发现论文中的每一句话对于整个算法的执行都有至关重要的作用。因此，以后在看论文的时候，需要逐句理解，最好能够抽象出整个模型，并且思考论文这么做对于整个系统的实现有什么好处\n其次，自己的代码的能力实在是弱的不行，我能看得懂这些代码，并能在脑中把每一个函数链接起来，但是距离完全靠自己的能力去实现一个这样的系统还有相当长的路要走。\n希望能坚持将自己所看的论文、方法都能用自己的话去说出来，加深下理解。\n\n\n\n\n\n\n\n","source":"_posts/Raft-PartA.md","raw":"---\ntitle: Raft-PartA\ndate: 2017-10-22 18:39:29\ncategories:\n- 分布式系统\n- MIT 6.824\ntags:\n- raft\n- golang\n---\n本次的实验为MIT6.824 Distribute System 中 Lab2 raft part A,通过课程所给的代码的骨架，要求实验raft中选举部分的功能。由于我的水平较渣，觉得课程的难度较大，与其说是实验比如说是对Github上的大神的代码进行理解，并结合论文进行思考。希望有朝一日能够自己做出一个实验啊！\n\n> Implement leader election and heartbeats (`AppendEntries` RPCs with no log entries). The goal for Part 2A is for a single leader to be elected, for the leader to remain the leader if there are no failures, and for a new leader to take over if the old leader fails or if packets to/from the old leader are lost. Run `go test -run 2A` to test your 2A code.\n\nPart A 部分要求实现raft的选举功能，其中raft中的每一个server都会维护自己的一个raft的结构体，其中只有两种RPC：`AppendEntries RPC` 和 `RequestVote RPC`。其中当`AppendEntres RPC`中的log为空时用作`HeartBeat`维护server 和 follower之间的通信，而`RequestVote RPC`则用作当follower转变成candidate时，向其他的server请求投票时的通信。整个选举的过程可以概括为下面的这张图，而其中又有许多的细节需要结合论文中的Figure 2中的每一个条件实现；\n\n{% asset_image election.png election%}\n## 可以概括为如下几个步骤\n1. 系统初始化时，所有的server都是FLLOWER状态,并维护一个计时器，计时结束会成为CANDIDATE并开始选举；FOLLOWER每当收到一次`Herat Beat`或`RequestVote RPC`时重置计时器；\n2. CANDIDATE在选举的时候依旧会维护一个计时器向所有的SERVER发送`Request Vote`，在结束时仍未选举完，重新开始选举。当CANDIDATE获得大部分的投票后变为LEADER;在选举的过程中若收到来自更新的term的`AppendEntries RPC`或者自己的term小于其他server的term时，转变为FOLLOWER；\n3. LEADER开始广播`Heart Beat`包，广播自己成为LEADER的事实，并且维护和FOLLOWER之间的通信。当发现FOLLOWER的reply中有更高的term时转变为FOLLOWER；\n\n## 代码解析\n\n\n### 定义一些常量\n``` go\nconst (\n\tFOLLOWER = iota\n\tCANDIDATE\n\tLEADER\n\n\tHEARTBEAT_INTERVAL    = 100\n\tMIN_ELECTION_INTERVAL = 400\n\tMAX_ELECTION_INTERVAL = 500\n)\n```\n### 创建必要的结构体\nraft相当于server中的state machine\n``` go\ntype Raft struct {\n\tmu        sync.Mutex          // Lock to protect shared access to this peer's state\n\tpeers     []*labrpc.ClientEnd // RPC end points of all peers\n\tpersister *Persister          // Object to hold this peer's persisted state\n\tme        int                 // this peer's index into peers[]\n\n\t// Your data here (2A, 2B, 2C).\n\t// Look at the paper's Figure 2 for a description of what\n\t// state a Raft server must maintain.\n\n\tvotedFor     int   //投票给某个CANDIDATE id\n\tvoteAcquired int   //收到的票数总数，用于判断能否成为LEADER\n\tstate        int32 //server当前的状态\n\tcurrentTerm  int32 //server当前的term\n\n\tvoteCh   chan struct{} //由于是并行发送用于指示server收到VoteRequest后的操作\n\tappendCh chan struct{} //收到Append Entries后的操作\n\n\telectionTimer *time.Timer //用于FOLLOWER和CANDIDATE的操作\n}\n```\n发送`RequestVote RPC`包中的内容\n```go\ntype RequestVoteArgs struct {\n\tTerm        int32\n\tCandidateId int\n}\n```\nserver对于`RequestVote RPC`包的回复\n```go\ntype RequestVoteReply struct {\n\t// Your data here (2A).\n\tTerm        int32\n\tVoteGranted bool\n}\n```\n发送`AppendEntries RPC`包中的内容\n```go\n//此处只涉及选举，不考虑replication及log中的内容\ntype AppendEntriesArgs struct {\n\tTerm     int32\n\tLeaderID int\n}\n```\n接收`AppendEntries RPC`包，并回复\n同样这里不考虑CANDIDATE中的log是否是最新的，只要有合适的`VoteReuest PRC`就投票\n```go\ntype AppendEntriesReply struct {\n\tTerm    int32\n\tSuccess bool\n}\n```\n###一些重要的工具函数\n\n\n```go\nfunc (rf *Raft) getTerm() int32 {\n\treturn atomic.LoadInt32(&rf.currentTerm)\n}\n\nfunc (rf *Raft) incrementTerm() int32 {\n\treturn atomic.AddInt32(&rf.currentTerm, 1)\n}\n\nfunc (rf *Raft) isState(state int32) bool {\n\treturn atomic.LoadInt32(&rf.state) == state\n}\n\nfunc (rf *Raft) GetState() (int, bool) {\n\n\tvar term int\n\tvar isleader bool\n\t// Your code here (2A).\n\tterm = int(rf.getTerm())\n\tisleader = rf.isState(LEADER)\n\treturn term, isleader\n}\n\nfunc randElectionDuration() time.Duration {\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\treturn time.Millisecond * time.Duration(\n    \t\t\tr.Int63n(MAX_ELECTION_INTERVAL-MIN_ELECTION_INTERVAL)+MIN_ELECTION_INTERVAL\n       \t)\n}\n```\n\n### CANDIDATE发送`RequestVote RPC`包\n用于CANDIDATE发送包和对reply的处理\n\n- 遍历每一个server，若投票了则voteGranted自增1\n- 若发现reply中的term大于自身当前的term，则转变为FOLLOWER\n\n```go\nfunc (rf *Raft) broadcastVoteReq() {\n\targs := RequestVoteArgs{Term: atomic.LoadInt32(&rf.currentTerm), CandidateId: rf.me}\n\tfor i, _ := range rf.peers {\n\t\tif i == rf.me {\n\t\t\tcontinue\n\t\t}\n\t\t// is it is candidate then send vote req\n\t\tgo func(server int) {\n\t\t\tvar reply RequestVoteReply\n\t\t\tif rf.isState(CANDIDATE) && rf.sendRequestVote(server, &args, &reply) {\n\t\t\t\trf.mu.Lock()\n\t\t\t\tdefer rf.mu.Unlock()\n\t\t\t\t//deal with the reply\n\t\t\t\tif reply.VoteGranted {\n\t\t\t\t\trf.voteAcquired += 1\n\t\t\t\t} else {\n\t\t\t\t\tif reply.Term > rf.currentTerm {\n\t\t\t\t\t\trf.currentTerm = reply.Term\n\t\t\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Server %d send vote req failed.\\n\", rf.me)\n\t\t\t}\n\t\t}(i)\n\t}\n}\n```\n\n\n### server对`RequestVote RPC`的处理\n依据论文Figure 2中的要求，有以下几个处理的要点：\n- 判断自身的term是否大于CANDIDATE的term，若是则拒绝投票，并更新reply中的term\n- 若当前的term小于CANDIDATE发送的term，更新自身的term，并将自己的状态变为follower（当前状态为CANDIDATE或LEADER）\n- 当两者的term相等时，必须是初始状态，否则拒绝投票（FOLLOWER转变为CANDIDATE时候term自增1，因此必须大于其他server）\n- 投票成功后，利用信道通知主循环（整个操作是并行的）\n\n\n```go\nfunc (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {\n\t// Your code here (2A, 2B).\n\trf.mu.Lock()\n\tdefer rf.mu.Unlock()\n\tif args.Term < rf.currentTerm {\n\t\treply.VoteGranted = false\n\t\treply.Term = rf.currentTerm\n\t} else if args.Term > rf.currentTerm {\n\t\trf.currentTerm = args.Term\n\t\trf.updateStateTo(FOLLOWER)\n\t\trf.votedFor = args.CandidateId\n\t\treply.VoteGranted = true\n\t} else {\n\t\tif rf.votedFor == -1 {\n\t\t\trf.votedFor = args.CandidateId\n\t\t\treply.VoteGranted = true\n\t\t} else {\n\t\t\treply.VoteGranted = false\n\t\t}\n\t}\n\tif reply.VoteGranted == true {\n\t\tgo func() { rf.voteCh <- struct{}{} }()\n\t}\n}\n```\n\n\n### LEADER广播`AppendEntries RPC`，和对reply的处理\n\n由于这里只是单纯的选举所以处理的逻辑很简单，只处理失败的回复：\n\n- 如果reply中的term大于当前LEADER中的term，则LEADER将自己的状态变成FOLLOWER\n\n\n```go\nfunc (rf *Raft) broadcastAppendEnrties() {\n\targs := AppendEntriesArgs{Term: atomic.LoadInt32(&rf.currentTerm), LeaderID: rf.me}\n\tfor i, _ := range rf.peers {\n\t\tif i == rf.me {\n\t\t\tcontinue\n\t\t}\n\t\tgo func(server int) {\n\t\t\tvar reply AppendEntriesReply\n\t\t\tif rf.isState(LEADER) && rf.sendAppendEntries(server, &args, &reply) {\n\t\t\t\trf.mu.Lock()\n\t\t\t\tdefer rf.mu.Unlock()\n\t\t\t\tif reply.Success {\n\n\t\t\t\t} else {\n\t\t\t\t\tif reply.Term > rf.currentTerm {\n\t\t\t\t\t\trf.currentTerm = reply.Term\n\t\t\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}\n```\n\n### server对`AppendEntries RPC`的处理\n同样，raft中的term可以作为判断是不是最新的依据，根据Figure 2，server在处理`AppendEntries RPC`，有如下注意点：\n- 如果`args.Term < rf.currentTerm`，`reply.Term = rf.currentTerm`;\n- 如果`args.Term > rf.currentTerm`，更新当前的term并且将状态改变为FOLLOWER（针对当前状态为CANDIDATE的server）\n\n\n```go\nfunc (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {\n\trf.mu.Lock()\n\tdefer rf.mu.Unlock()\n\t//deal with the msg and reply\n\tif args.Term < rf.currentTerm {\n\t\treply.Success = false\n\t\treply.Term = rf.currentTerm\n\t} else if args.Term > rf.currentTerm {\n\t\trf.currentTerm = args.Term\n\t\trf.updateStateTo(FOLLOWER)\n\t\treply.Success = true\n\t} else {\n\t\treply.Success = true\n\t}\n\tgo func() {\n\t\trf.appendCh <- struct{}{}\n\t}()\n}\n```\n\n\n### 状态转变的函数\n\n需要注意的是当转变成FOLLOWER时，要将自己的`VoteFor`初始化为-1，当转变成CANDIDATE时候要注意开始选举LEADER\n```go\nfunc (rf *Raft) updateStateTo(state int32) {\n\tif rf.isState(state) {\n\t\treturn\n\t}\n\tstateDesc := []string{\"FOLLOWER\", \"CANDIDATE\", \"LEADER\"}\n\tpreState := rf.state\n\tswitch state {\n\tcase FOLLOWER:\n\t\trf.state = FOLLOWER\n\t\trf.votedFor = -1\n\tcase CANDIDATE:\n\t\trf.state = CANDIDATE\n\t\trf.startElection()\n\tcase LEADER:\n\t\trf.state = LEADER\n\tdefault:\n\t\tfmt.Printf(\"Warning: invalid state %d, do nothing.\\n\", state)\n\t}\n\tfmt.Printf(\"In term %d: Server %d transfer from %s to %s\\n\",\n\t\trf.currentTerm, rf.me, stateDesc[preState], stateDesc[rf.state])\n\n}\n```\n### 开始新一轮选举的函数\n按照论文的要求在开始选举新的LEADER的时候要重置计时器，因为CANDIDATE会为自己投票所以票数初始置为1\n```go\nfunc (rf *Raft) startElection() {\n\trf.incrementTerm()  //first increase current term\n\trf.votedFor = rf.me //vote for self\n\trf.voteAcquired = 1 //acquire self's vote\n\trf.electionTimer.Reset(randElectionDuration())\n\trf.broadcastVoteReq()\n}\n```\n\n#### 整个状态的循环实现\n不断的循环，并根据当前server的角色进行不同的操作\n\n\n#### FOLLOWER\n\n\n- 当收到CANDIDATE发送的`VoteRequest RPC`时，重置计时器\n- 当收到LEADER发送的`AppendEntries RPC`时，重置计时器\n- 当计时器结束时，说明当前的server断绝联系，于是FOLLOWER转变为CANDIDATE开始新一轮的选举\n\n\n#### CANDIDATE\n- 在收到`AppendEntries RPC`时，说明LEADER依旧存在，停止选举转变为FOLLOWER\n- 当计时器结束时，重新开始选举\n- 当投票数大于总数的一半时，当选LEADER\n\n\n#### LEADER\n- 间隔一段时间发送`HeartBeat`心跳包维持LEADER和其他的server的通信\n\n\n```go\nfunc (rf *Raft) startLoop() {\n\trf.electionTimer = time.NewTimer(randElectionDuration())\n\tfor {\n\t\tswitch atomic.LoadInt32(&rf.state) {\n\t\tcase FOLLOWER:\n\t\t\tselect {\n\t\t\tcase <-rf.voteCh:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\tcase <-rf.appendCh:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\tcase <-rf.electionTimer.C:\n\t\t\t\t//time out\n\t\t\t\trf.mu.Lock()\n\t\t\t\trf.updateStateTo(CANDIDATE)\n\t\t\t\trf.mu.Unlock()\n\t\t\t}\n\t\tcase CANDIDATE:\n\t\t\trf.mu.Lock()\n\t\t\tselect {\n\t\t\tcase <-rf.appendCh:\n\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\tcase <-rf.electionTimer.C:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\t\trf.startElection()\n\t\t\tdefault:\n\t\t\t\tif rf.voteAcquired > len(rf.peers)/2 {\n\t\t\t\t\trf.updateStateTo(LEADER)\n\t\t\t\t}\n\t\t\t}\n\t\t\trf.mu.Unlock()\n\t\tcase LEADER:\n\t\t\trf.broadcastAppendEnrties()\n\t\t\ttime.Sleep(HEARTBEAT_INTERVAL * time.Millisecond)\n\t\t}\n\n\t}\n```\n\n### 初始化并开始循环\n```go\nfunc Make(peers []*labrpc.ClientEnd, me int,\n\tpersister *Persister, applyCh chan ApplyMsg) *Raft {\n\trf := &Raft{}\n\trf.peers = peers\n\trf.persister = persister\n\trf.me = me\n\n\t// Your initialization code here (2A, 2B, 2C).\n\trf.state = FOLLOWER\n\trf.votedFor = -1\n\trf.voteCh = make(chan struct{})\n\trf.appendCh = make(chan struct{})\n\n\t// initialize from state persisted before a crash\n\trf.readPersist(persister.ReadRaftState())\n\n\tgo rf.startLoop()\n\n\treturn rf\n}\n```\n\n## 总结\n\n---\n第一次将论文中的算法“实现”，虽然是参考了大神的代码，还是觉得收获满满。\n首先，纠正了我看论文一目十行的方法，以前总觉得论文这东西太虚，只是所谓的想法，经过这次无数遍的研读之后，发现论文中的每一句话对于整个算法的执行都有至关重要的作用。因此，以后在看论文的时候，需要逐句理解，最好能够抽象出整个模型，并且思考论文这么做对于整个系统的实现有什么好处\n其次，自己的代码的能力实在是弱的不行，我能看得懂这些代码，并能在脑中把每一个函数链接起来，但是距离完全靠自己的能力去实现一个这样的系统还有相当长的路要走。\n希望能坚持将自己所看的论文、方法都能用自己的话去说出来，加深下理解。\n\n\n\n\n\n\n\n","slug":"Raft-PartA","published":1,"updated":"2017-10-25T10:27:26.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj97qboed0000nsumzcyo91qf","content":"<p>本次的实验为MIT6.824 Distribute System 中 Lab2 raft part A,通过课程所给的代码的骨架，要求实验raft中选举部分的功能。由于我的水平较渣，觉得课程的难度较大，与其说是实验比如说是对Github上的大神的代码进行理解，并结合论文进行思考。希望有朝一日能够自己做出一个实验啊！</p>\n<blockquote>\n<p>Implement leader election and heartbeats (<code>AppendEntries</code> RPCs with no log entries). The goal for Part 2A is for a single leader to be elected, for the leader to remain the leader if there are no failures, and for a new leader to take over if the old leader fails or if packets to/from the old leader are lost. Run <code>go test -run 2A</code> to test your 2A code.</p>\n</blockquote>\n<p>Part A 部分要求实现raft的选举功能，其中raft中的每一个server都会维护自己的一个raft的结构体，其中只有两种RPC：<code>AppendEntries RPC</code> 和 <code>RequestVote RPC</code>。其中当<code>AppendEntres RPC</code>中的log为空时用作<code>HeartBeat</code>维护server 和 follower之间的通信，而<code>RequestVote RPC</code>则用作当follower转变成candidate时，向其他的server请求投票时的通信。整个选举的过程可以概括为下面的这张图，而其中又有许多的细节需要结合论文中的Figure 2中的每一个条件实现；</p>\n<img src=\"/2017/10/22/Raft-PartA/election.png\" alt=\"election\" title=\"election\">\n<h2 id=\"可以概括为如下几个步骤\"><a href=\"#可以概括为如下几个步骤\" class=\"headerlink\" title=\"可以概括为如下几个步骤\"></a>可以概括为如下几个步骤</h2><ol>\n<li>系统初始化时，所有的server都是FLLOWER状态,并维护一个计时器，计时结束会成为CANDIDATE并开始选举；FOLLOWER每当收到一次<code>Herat Beat</code>或<code>RequestVote RPC</code>时重置计时器；</li>\n<li>CANDIDATE在选举的时候依旧会维护一个计时器向所有的SERVER发送<code>Request Vote</code>，在结束时仍未选举完，重新开始选举。当CANDIDATE获得大部分的投票后变为LEADER;在选举的过程中若收到来自更新的term的<code>AppendEntries RPC</code>或者自己的term小于其他server的term时，转变为FOLLOWER；</li>\n<li>LEADER开始广播<code>Heart Beat</code>包，广播自己成为LEADER的事实，并且维护和FOLLOWER之间的通信。当发现FOLLOWER的reply中有更高的term时转变为FOLLOWER；</li>\n</ol>\n<h2 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h2><h3 id=\"定义一些常量\"><a href=\"#定义一些常量\" class=\"headerlink\" title=\"定义一些常量\"></a>定义一些常量</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tFOLLOWER = <span class=\"literal\">iota</span></div><div class=\"line\">\tCANDIDATE</div><div class=\"line\">\tLEADER</div><div class=\"line\"></div><div class=\"line\">\tHEARTBEAT_INTERVAL    = <span class=\"number\">100</span></div><div class=\"line\">\tMIN_ELECTION_INTERVAL = <span class=\"number\">400</span></div><div class=\"line\">\tMAX_ELECTION_INTERVAL = <span class=\"number\">500</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h3 id=\"创建必要的结构体\"><a href=\"#创建必要的结构体\" class=\"headerlink\" title=\"创建必要的结构体\"></a>创建必要的结构体</h3><p>raft相当于server中的state machine<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Raft <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tmu        sync.Mutex          <span class=\"comment\">// Lock to protect shared access to this peer's state</span></div><div class=\"line\">\tpeers     []*labrpc.ClientEnd <span class=\"comment\">// RPC end points of all peers</span></div><div class=\"line\">\tpersister *Persister          <span class=\"comment\">// Object to hold this peer's persisted state</span></div><div class=\"line\">\tme        <span class=\"keyword\">int</span>                 <span class=\"comment\">// this peer's index into peers[]</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Your data here (2A, 2B, 2C).</span></div><div class=\"line\">\t<span class=\"comment\">// Look at the paper's Figure 2 for a description of what</span></div><div class=\"line\">\t<span class=\"comment\">// state a Raft server must maintain.</span></div><div class=\"line\"></div><div class=\"line\">\tvotedFor     <span class=\"keyword\">int</span>   <span class=\"comment\">//投票给某个CANDIDATE id</span></div><div class=\"line\">\tvoteAcquired <span class=\"keyword\">int</span>   <span class=\"comment\">//收到的票数总数，用于判断能否成为LEADER</span></div><div class=\"line\">\tstate        <span class=\"keyword\">int32</span> <span class=\"comment\">//server当前的状态</span></div><div class=\"line\">\tcurrentTerm  <span class=\"keyword\">int32</span> <span class=\"comment\">//server当前的term</span></div><div class=\"line\"></div><div class=\"line\">\tvoteCh   <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">//由于是并行发送用于指示server收到VoteRequest后的操作</span></div><div class=\"line\">\tappendCh <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">//收到Append Entries后的操作</span></div><div class=\"line\"></div><div class=\"line\">\telectionTimer *time.Timer <span class=\"comment\">//用于FOLLOWER和CANDIDATE的操作</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送<code>RequestVote RPC</code>包中的内容<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RequestVoteArgs <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm        <span class=\"keyword\">int32</span></div><div class=\"line\">\tCandidateId <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>server对于<code>RequestVote RPC</code>包的回复<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RequestVoteReply <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Your data here (2A).</span></div><div class=\"line\">\tTerm        <span class=\"keyword\">int32</span></div><div class=\"line\">\tVoteGranted <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送<code>AppendEntries RPC</code>包中的内容<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//此处只涉及选举，不考虑replication及log中的内容</span></div><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesArgs <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm     <span class=\"keyword\">int32</span></div><div class=\"line\">\tLeaderID <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接收<code>AppendEntries RPC</code>包，并回复<br>同样这里不考虑CANDIDATE中的log是否是最新的，只要有合适的<code>VoteReuest PRC</code>就投票<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesReply <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm    <span class=\"keyword\">int32</span></div><div class=\"line\">\tSuccess <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>###一些重要的工具函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">getTerm</span><span class=\"params\">()</span> <span class=\"title\">int32</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.LoadInt32(&amp;rf.currentTerm)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">incrementTerm</span><span class=\"params\">()</span> <span class=\"title\">int32</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.AddInt32(&amp;rf.currentTerm, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">isState</span><span class=\"params\">(state <span class=\"keyword\">int32</span>)</span> <span class=\"title\">bool</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.LoadInt32(&amp;rf.state) == state</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">GetState</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>)</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> term <span class=\"keyword\">int</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> isleader <span class=\"keyword\">bool</span></div><div class=\"line\">\t<span class=\"comment\">// Your code here (2A).</span></div><div class=\"line\">\tterm = <span class=\"keyword\">int</span>(rf.getTerm())</div><div class=\"line\">\tisleader = rf.isState(LEADER)</div><div class=\"line\">\t<span class=\"keyword\">return</span> term, isleader</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">randElectionDuration</span><span class=\"params\">()</span> <span class=\"title\">time</span>.<span class=\"title\">Duration</span></span> &#123;</div><div class=\"line\">\tr := rand.New(rand.NewSource(time.Now().UnixNano()))</div><div class=\"line\">\t<span class=\"keyword\">return</span> time.Millisecond * time.Duration(</div><div class=\"line\">    \t\t\tr.Int63n(MAX_ELECTION_INTERVAL-MIN_ELECTION_INTERVAL)+MIN_ELECTION_INTERVAL</div><div class=\"line\">       \t)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"CANDIDATE发送RequestVote-RPC包\"><a href=\"#CANDIDATE发送RequestVote-RPC包\" class=\"headerlink\" title=\"CANDIDATE发送RequestVote RPC包\"></a>CANDIDATE发送<code>RequestVote RPC</code>包</h3><p>用于CANDIDATE发送包和对reply的处理</p>\n<ul>\n<li>遍历每一个server，若投票了则voteGranted自增1</li>\n<li>若发现reply中的term大于自身当前的term，则转变为FOLLOWER</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">broadcastVoteReq</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\targs := RequestVoteArgs&#123;Term: atomic.LoadInt32(&amp;rf.currentTerm), CandidateId: rf.me&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> rf.peers &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> i == rf.me &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// is it is candidate then send vote req</span></div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(server <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> reply RequestVoteReply</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> rf.isState(CANDIDATE) &amp;&amp; rf.sendRequestVote(server, &amp;args, &amp;reply) &#123;</div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//deal with the reply</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> reply.VoteGranted &#123;</div><div class=\"line\">\t\t\t\t\trf.voteAcquired += <span class=\"number\">1</span></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> reply.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\t\t\t\t\trf.currentTerm = reply.Term</div><div class=\"line\">\t\t\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tfmt.Printf(<span class=\"string\">\"Server %d send vote req failed.\\n\"</span>, rf.me)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"server对RequestVote-RPC的处理\"><a href=\"#server对RequestVote-RPC的处理\" class=\"headerlink\" title=\"server对RequestVote RPC的处理\"></a>server对<code>RequestVote RPC</code>的处理</h3><p>依据论文Figure 2中的要求，有以下几个处理的要点：</p>\n<ul>\n<li>判断自身的term是否大于CANDIDATE的term，若是则拒绝投票，并更新reply中的term</li>\n<li>若当前的term小于CANDIDATE发送的term，更新自身的term，并将自己的状态变为follower（当前状态为CANDIDATE或LEADER）</li>\n<li>当两者的term相等时，必须是初始状态，否则拒绝投票（FOLLOWER转变为CANDIDATE时候term自增1，因此必须大于其他server）</li>\n<li>投票成功后，利用信道通知主循环（整个操作是并行的）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">RequestVote</span><span class=\"params\">(args *RequestVoteArgs, reply *RequestVoteReply)</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Your code here (2A, 2B).</span></div><div class=\"line\">\trf.mu.Lock()</div><div class=\"line\">\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t<span class=\"keyword\">if</span> args.Term &lt; rf.currentTerm &#123;</div><div class=\"line\">\t\treply.VoteGranted = <span class=\"literal\">false</span></div><div class=\"line\">\t\treply.Term = rf.currentTerm</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> args.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\trf.currentTerm = args.Term</div><div class=\"line\">\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\trf.votedFor = args.CandidateId</div><div class=\"line\">\t\treply.VoteGranted = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> rf.votedFor == <span class=\"number\">-1</span> &#123;</div><div class=\"line\">\t\t\trf.votedFor = args.CandidateId</div><div class=\"line\">\t\t\treply.VoteGranted = <span class=\"literal\">true</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\treply.VoteGranted = <span class=\"literal\">false</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> reply.VoteGranted == <span class=\"literal\">true</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; rf.voteCh &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125; &#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"LEADER广播AppendEntries-RPC，和对reply的处理\"><a href=\"#LEADER广播AppendEntries-RPC，和对reply的处理\" class=\"headerlink\" title=\"LEADER广播AppendEntries RPC，和对reply的处理\"></a>LEADER广播<code>AppendEntries RPC</code>，和对reply的处理</h3><p>由于这里只是单纯的选举所以处理的逻辑很简单，只处理失败的回复：</p>\n<ul>\n<li>如果reply中的term大于当前LEADER中的term，则LEADER将自己的状态变成FOLLOWER</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">broadcastAppendEnrties</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\targs := AppendEntriesArgs&#123;Term: atomic.LoadInt32(&amp;rf.currentTerm), LeaderID: rf.me&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> rf.peers &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> i == rf.me &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(server <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> reply AppendEntriesReply</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> rf.isState(LEADER) &amp;&amp; rf.sendAppendEntries(server, &amp;args, &amp;reply) &#123;</div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> reply.Success &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> reply.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\t\t\t\t\trf.currentTerm = reply.Term</div><div class=\"line\">\t\t\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"server对AppendEntries-RPC的处理\"><a href=\"#server对AppendEntries-RPC的处理\" class=\"headerlink\" title=\"server对AppendEntries RPC的处理\"></a>server对<code>AppendEntries RPC</code>的处理</h3><p>同样，raft中的term可以作为判断是不是最新的依据，根据Figure 2，server在处理<code>AppendEntries RPC</code>，有如下注意点：</p>\n<ul>\n<li>如果<code>args.Term &lt; rf.currentTerm</code>，<code>reply.Term = rf.currentTerm</code>;</li>\n<li>如果<code>args.Term &gt; rf.currentTerm</code>，更新当前的term并且将状态改变为FOLLOWER（针对当前状态为CANDIDATE的server）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">AppendEntries</span><span class=\"params\">(args *AppendEntriesArgs, reply *AppendEntriesReply)</span></span> &#123;</div><div class=\"line\">\trf.mu.Lock()</div><div class=\"line\">\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t<span class=\"comment\">//deal with the msg and reply</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> args.Term &lt; rf.currentTerm &#123;</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">false</span></div><div class=\"line\">\t\treply.Term = rf.currentTerm</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> args.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\trf.currentTerm = args.Term</div><div class=\"line\">\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\trf.appendCh &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"状态转变的函数\"><a href=\"#状态转变的函数\" class=\"headerlink\" title=\"状态转变的函数\"></a>状态转变的函数</h3><p>需要注意的是当转变成FOLLOWER时，要将自己的<code>VoteFor</code>初始化为-1，当转变成CANDIDATE时候要注意开始选举LEADER<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">updateStateTo</span><span class=\"params\">(state <span class=\"keyword\">int32</span>)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> rf.isState(state) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tstateDesc := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"FOLLOWER\"</span>, <span class=\"string\">\"CANDIDATE\"</span>, <span class=\"string\">\"LEADER\"</span>&#125;</div><div class=\"line\">\tpreState := rf.state</div><div class=\"line\">\t<span class=\"keyword\">switch</span> state &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> FOLLOWER:</div><div class=\"line\">\t\trf.state = FOLLOWER</div><div class=\"line\">\t\trf.votedFor = <span class=\"number\">-1</span></div><div class=\"line\">\t<span class=\"keyword\">case</span> CANDIDATE:</div><div class=\"line\">\t\trf.state = CANDIDATE</div><div class=\"line\">\t\trf.startElection()</div><div class=\"line\">\t<span class=\"keyword\">case</span> LEADER:</div><div class=\"line\">\t\trf.state = LEADER</div><div class=\"line\">\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Warning: invalid state %d, do nothing.\\n\"</span>, state)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"In term %d: Server %d transfer from %s to %s\\n\"</span>,</div><div class=\"line\">\t\trf.currentTerm, rf.me, stateDesc[preState], stateDesc[rf.state])</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"开始新一轮选举的函数\"><a href=\"#开始新一轮选举的函数\" class=\"headerlink\" title=\"开始新一轮选举的函数\"></a>开始新一轮选举的函数</h3><p>按照论文的要求在开始选举新的LEADER的时候要重置计时器，因为CANDIDATE会为自己投票所以票数初始置为1<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">startElection</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\trf.incrementTerm()  <span class=\"comment\">//first increase current term</span></div><div class=\"line\">\trf.votedFor = rf.me <span class=\"comment\">//vote for self</span></div><div class=\"line\">\trf.voteAcquired = <span class=\"number\">1</span> <span class=\"comment\">//acquire self's vote</span></div><div class=\"line\">\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\trf.broadcastVoteReq()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"整个状态的循环实现\"><a href=\"#整个状态的循环实现\" class=\"headerlink\" title=\"整个状态的循环实现\"></a>整个状态的循环实现</h4><p>不断的循环，并根据当前server的角色进行不同的操作</p>\n<h4 id=\"FOLLOWER\"><a href=\"#FOLLOWER\" class=\"headerlink\" title=\"FOLLOWER\"></a>FOLLOWER</h4><ul>\n<li>当收到CANDIDATE发送的<code>VoteRequest RPC</code>时，重置计时器</li>\n<li>当收到LEADER发送的<code>AppendEntries RPC</code>时，重置计时器</li>\n<li>当计时器结束时，说明当前的server断绝联系，于是FOLLOWER转变为CANDIDATE开始新一轮的选举</li>\n</ul>\n<h4 id=\"CANDIDATE\"><a href=\"#CANDIDATE\" class=\"headerlink\" title=\"CANDIDATE\"></a>CANDIDATE</h4><ul>\n<li>在收到<code>AppendEntries RPC</code>时，说明LEADER依旧存在，停止选举转变为FOLLOWER</li>\n<li>当计时器结束时，重新开始选举</li>\n<li>当投票数大于总数的一半时，当选LEADER</li>\n</ul>\n<h4 id=\"LEADER\"><a href=\"#LEADER\" class=\"headerlink\" title=\"LEADER\"></a>LEADER</h4><ul>\n<li>间隔一段时间发送<code>HeartBeat</code>心跳包维持LEADER和其他的server的通信</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">startLoop</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\trf.electionTimer = time.NewTimer(randElectionDuration())</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> atomic.LoadInt32(&amp;rf.state) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> FOLLOWER:</div><div class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.voteCh:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.appendCh:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.electionTimer.C:</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//time out</span></div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\trf.updateStateTo(CANDIDATE)</div><div class=\"line\">\t\t\t\trf.mu.Unlock()</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> CANDIDATE:</div><div class=\"line\">\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.appendCh:</div><div class=\"line\">\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.electionTimer.C:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t\trf.startElection()</div><div class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> rf.voteAcquired &gt; <span class=\"built_in\">len</span>(rf.peers)/<span class=\"number\">2</span> &#123;</div><div class=\"line\">\t\t\t\t\trf.updateStateTo(LEADER)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\trf.mu.Unlock()</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> LEADER:</div><div class=\"line\">\t\t\trf.broadcastAppendEnrties()</div><div class=\"line\">\t\t\ttime.Sleep(HEARTBEAT_INTERVAL * time.Millisecond)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"初始化并开始循环\"><a href=\"#初始化并开始循环\" class=\"headerlink\" title=\"初始化并开始循环\"></a>初始化并开始循环</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Make</span><span class=\"params\">(peers []*labrpc.ClientEnd, me <span class=\"keyword\">int</span>,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\tpersister *Persister, applyCh <span class=\"keyword\">chan</span> ApplyMsg)</span> *<span class=\"title\">Raft</span></span> &#123;</div><div class=\"line\">\trf := &amp;Raft&#123;&#125;</div><div class=\"line\">\trf.peers = peers</div><div class=\"line\">\trf.persister = persister</div><div class=\"line\">\trf.me = me</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Your initialization code here (2A, 2B, 2C).</span></div><div class=\"line\">\trf.state = FOLLOWER</div><div class=\"line\">\trf.votedFor = <span class=\"number\">-1</span></div><div class=\"line\">\trf.voteCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\">\trf.appendCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// initialize from state persisted before a crash</span></div><div class=\"line\">\trf.readPersist(persister.ReadRaftState())</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> rf.startLoop()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> rf</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><hr>\n<p>第一次将论文中的算法“实现”，虽然是参考了大神的代码，还是觉得收获满满。<br>首先，纠正了我看论文一目十行的方法，以前总觉得论文这东西太虚，只是所谓的想法，经过这次无数遍的研读之后，发现论文中的每一句话对于整个算法的执行都有至关重要的作用。因此，以后在看论文的时候，需要逐句理解，最好能够抽象出整个模型，并且思考论文这么做对于整个系统的实现有什么好处<br>其次，自己的代码的能力实在是弱的不行，我能看得懂这些代码，并能在脑中把每一个函数链接起来，但是距离完全靠自己的能力去实现一个这样的系统还有相当长的路要走。<br>希望能坚持将自己所看的论文、方法都能用自己的话去说出来，加深下理解。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本次的实验为MIT6.824 Distribute System 中 Lab2 raft part A,通过课程所给的代码的骨架，要求实验raft中选举部分的功能。由于我的水平较渣，觉得课程的难度较大，与其说是实验比如说是对Github上的大神的代码进行理解，并结合论文进行思考。希望有朝一日能够自己做出一个实验啊！</p>\n<blockquote>\n<p>Implement leader election and heartbeats (<code>AppendEntries</code> RPCs with no log entries). The goal for Part 2A is for a single leader to be elected, for the leader to remain the leader if there are no failures, and for a new leader to take over if the old leader fails or if packets to/from the old leader are lost. Run <code>go test -run 2A</code> to test your 2A code.</p>\n</blockquote>\n<p>Part A 部分要求实现raft的选举功能，其中raft中的每一个server都会维护自己的一个raft的结构体，其中只有两种RPC：<code>AppendEntries RPC</code> 和 <code>RequestVote RPC</code>。其中当<code>AppendEntres RPC</code>中的log为空时用作<code>HeartBeat</code>维护server 和 follower之间的通信，而<code>RequestVote RPC</code>则用作当follower转变成candidate时，向其他的server请求投票时的通信。整个选举的过程可以概括为下面的这张图，而其中又有许多的细节需要结合论文中的Figure 2中的每一个条件实现；</p>\n<img src=\"/2017/10/22/Raft-PartA/election.png\" alt=\"election\" title=\"election\">\n<h2 id=\"可以概括为如下几个步骤\"><a href=\"#可以概括为如下几个步骤\" class=\"headerlink\" title=\"可以概括为如下几个步骤\"></a>可以概括为如下几个步骤</h2><ol>\n<li>系统初始化时，所有的server都是FLLOWER状态,并维护一个计时器，计时结束会成为CANDIDATE并开始选举；FOLLOWER每当收到一次<code>Herat Beat</code>或<code>RequestVote RPC</code>时重置计时器；</li>\n<li>CANDIDATE在选举的时候依旧会维护一个计时器向所有的SERVER发送<code>Request Vote</code>，在结束时仍未选举完，重新开始选举。当CANDIDATE获得大部分的投票后变为LEADER;在选举的过程中若收到来自更新的term的<code>AppendEntries RPC</code>或者自己的term小于其他server的term时，转变为FOLLOWER；</li>\n<li>LEADER开始广播<code>Heart Beat</code>包，广播自己成为LEADER的事实，并且维护和FOLLOWER之间的通信。当发现FOLLOWER的reply中有更高的term时转变为FOLLOWER；</li>\n</ol>\n<h2 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h2><h3 id=\"定义一些常量\"><a href=\"#定义一些常量\" class=\"headerlink\" title=\"定义一些常量\"></a>定义一些常量</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tFOLLOWER = <span class=\"literal\">iota</span></div><div class=\"line\">\tCANDIDATE</div><div class=\"line\">\tLEADER</div><div class=\"line\"></div><div class=\"line\">\tHEARTBEAT_INTERVAL    = <span class=\"number\">100</span></div><div class=\"line\">\tMIN_ELECTION_INTERVAL = <span class=\"number\">400</span></div><div class=\"line\">\tMAX_ELECTION_INTERVAL = <span class=\"number\">500</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h3 id=\"创建必要的结构体\"><a href=\"#创建必要的结构体\" class=\"headerlink\" title=\"创建必要的结构体\"></a>创建必要的结构体</h3><p>raft相当于server中的state machine<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Raft <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tmu        sync.Mutex          <span class=\"comment\">// Lock to protect shared access to this peer's state</span></div><div class=\"line\">\tpeers     []*labrpc.ClientEnd <span class=\"comment\">// RPC end points of all peers</span></div><div class=\"line\">\tpersister *Persister          <span class=\"comment\">// Object to hold this peer's persisted state</span></div><div class=\"line\">\tme        <span class=\"keyword\">int</span>                 <span class=\"comment\">// this peer's index into peers[]</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Your data here (2A, 2B, 2C).</span></div><div class=\"line\">\t<span class=\"comment\">// Look at the paper's Figure 2 for a description of what</span></div><div class=\"line\">\t<span class=\"comment\">// state a Raft server must maintain.</span></div><div class=\"line\"></div><div class=\"line\">\tvotedFor     <span class=\"keyword\">int</span>   <span class=\"comment\">//投票给某个CANDIDATE id</span></div><div class=\"line\">\tvoteAcquired <span class=\"keyword\">int</span>   <span class=\"comment\">//收到的票数总数，用于判断能否成为LEADER</span></div><div class=\"line\">\tstate        <span class=\"keyword\">int32</span> <span class=\"comment\">//server当前的状态</span></div><div class=\"line\">\tcurrentTerm  <span class=\"keyword\">int32</span> <span class=\"comment\">//server当前的term</span></div><div class=\"line\"></div><div class=\"line\">\tvoteCh   <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">//由于是并行发送用于指示server收到VoteRequest后的操作</span></div><div class=\"line\">\tappendCh <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">//收到Append Entries后的操作</span></div><div class=\"line\"></div><div class=\"line\">\telectionTimer *time.Timer <span class=\"comment\">//用于FOLLOWER和CANDIDATE的操作</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送<code>RequestVote RPC</code>包中的内容<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RequestVoteArgs <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm        <span class=\"keyword\">int32</span></div><div class=\"line\">\tCandidateId <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>server对于<code>RequestVote RPC</code>包的回复<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RequestVoteReply <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Your data here (2A).</span></div><div class=\"line\">\tTerm        <span class=\"keyword\">int32</span></div><div class=\"line\">\tVoteGranted <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送<code>AppendEntries RPC</code>包中的内容<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//此处只涉及选举，不考虑replication及log中的内容</span></div><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesArgs <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm     <span class=\"keyword\">int32</span></div><div class=\"line\">\tLeaderID <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接收<code>AppendEntries RPC</code>包，并回复<br>同样这里不考虑CANDIDATE中的log是否是最新的，只要有合适的<code>VoteReuest PRC</code>就投票<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesReply <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm    <span class=\"keyword\">int32</span></div><div class=\"line\">\tSuccess <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>###一些重要的工具函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">getTerm</span><span class=\"params\">()</span> <span class=\"title\">int32</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.LoadInt32(&amp;rf.currentTerm)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">incrementTerm</span><span class=\"params\">()</span> <span class=\"title\">int32</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.AddInt32(&amp;rf.currentTerm, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">isState</span><span class=\"params\">(state <span class=\"keyword\">int32</span>)</span> <span class=\"title\">bool</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.LoadInt32(&amp;rf.state) == state</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">GetState</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>)</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> term <span class=\"keyword\">int</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> isleader <span class=\"keyword\">bool</span></div><div class=\"line\">\t<span class=\"comment\">// Your code here (2A).</span></div><div class=\"line\">\tterm = <span class=\"keyword\">int</span>(rf.getTerm())</div><div class=\"line\">\tisleader = rf.isState(LEADER)</div><div class=\"line\">\t<span class=\"keyword\">return</span> term, isleader</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">randElectionDuration</span><span class=\"params\">()</span> <span class=\"title\">time</span>.<span class=\"title\">Duration</span></span> &#123;</div><div class=\"line\">\tr := rand.New(rand.NewSource(time.Now().UnixNano()))</div><div class=\"line\">\t<span class=\"keyword\">return</span> time.Millisecond * time.Duration(</div><div class=\"line\">    \t\t\tr.Int63n(MAX_ELECTION_INTERVAL-MIN_ELECTION_INTERVAL)+MIN_ELECTION_INTERVAL</div><div class=\"line\">       \t)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"CANDIDATE发送RequestVote-RPC包\"><a href=\"#CANDIDATE发送RequestVote-RPC包\" class=\"headerlink\" title=\"CANDIDATE发送RequestVote RPC包\"></a>CANDIDATE发送<code>RequestVote RPC</code>包</h3><p>用于CANDIDATE发送包和对reply的处理</p>\n<ul>\n<li>遍历每一个server，若投票了则voteGranted自增1</li>\n<li>若发现reply中的term大于自身当前的term，则转变为FOLLOWER</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">broadcastVoteReq</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\targs := RequestVoteArgs&#123;Term: atomic.LoadInt32(&amp;rf.currentTerm), CandidateId: rf.me&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> rf.peers &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> i == rf.me &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// is it is candidate then send vote req</span></div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(server <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> reply RequestVoteReply</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> rf.isState(CANDIDATE) &amp;&amp; rf.sendRequestVote(server, &amp;args, &amp;reply) &#123;</div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//deal with the reply</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> reply.VoteGranted &#123;</div><div class=\"line\">\t\t\t\t\trf.voteAcquired += <span class=\"number\">1</span></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> reply.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\t\t\t\t\trf.currentTerm = reply.Term</div><div class=\"line\">\t\t\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tfmt.Printf(<span class=\"string\">\"Server %d send vote req failed.\\n\"</span>, rf.me)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"server对RequestVote-RPC的处理\"><a href=\"#server对RequestVote-RPC的处理\" class=\"headerlink\" title=\"server对RequestVote RPC的处理\"></a>server对<code>RequestVote RPC</code>的处理</h3><p>依据论文Figure 2中的要求，有以下几个处理的要点：</p>\n<ul>\n<li>判断自身的term是否大于CANDIDATE的term，若是则拒绝投票，并更新reply中的term</li>\n<li>若当前的term小于CANDIDATE发送的term，更新自身的term，并将自己的状态变为follower（当前状态为CANDIDATE或LEADER）</li>\n<li>当两者的term相等时，必须是初始状态，否则拒绝投票（FOLLOWER转变为CANDIDATE时候term自增1，因此必须大于其他server）</li>\n<li>投票成功后，利用信道通知主循环（整个操作是并行的）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">RequestVote</span><span class=\"params\">(args *RequestVoteArgs, reply *RequestVoteReply)</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Your code here (2A, 2B).</span></div><div class=\"line\">\trf.mu.Lock()</div><div class=\"line\">\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t<span class=\"keyword\">if</span> args.Term &lt; rf.currentTerm &#123;</div><div class=\"line\">\t\treply.VoteGranted = <span class=\"literal\">false</span></div><div class=\"line\">\t\treply.Term = rf.currentTerm</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> args.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\trf.currentTerm = args.Term</div><div class=\"line\">\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\trf.votedFor = args.CandidateId</div><div class=\"line\">\t\treply.VoteGranted = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> rf.votedFor == <span class=\"number\">-1</span> &#123;</div><div class=\"line\">\t\t\trf.votedFor = args.CandidateId</div><div class=\"line\">\t\t\treply.VoteGranted = <span class=\"literal\">true</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\treply.VoteGranted = <span class=\"literal\">false</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> reply.VoteGranted == <span class=\"literal\">true</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; rf.voteCh &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125; &#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"LEADER广播AppendEntries-RPC，和对reply的处理\"><a href=\"#LEADER广播AppendEntries-RPC，和对reply的处理\" class=\"headerlink\" title=\"LEADER广播AppendEntries RPC，和对reply的处理\"></a>LEADER广播<code>AppendEntries RPC</code>，和对reply的处理</h3><p>由于这里只是单纯的选举所以处理的逻辑很简单，只处理失败的回复：</p>\n<ul>\n<li>如果reply中的term大于当前LEADER中的term，则LEADER将自己的状态变成FOLLOWER</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">broadcastAppendEnrties</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\targs := AppendEntriesArgs&#123;Term: atomic.LoadInt32(&amp;rf.currentTerm), LeaderID: rf.me&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> rf.peers &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> i == rf.me &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(server <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> reply AppendEntriesReply</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> rf.isState(LEADER) &amp;&amp; rf.sendAppendEntries(server, &amp;args, &amp;reply) &#123;</div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> reply.Success &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> reply.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\t\t\t\t\trf.currentTerm = reply.Term</div><div class=\"line\">\t\t\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"server对AppendEntries-RPC的处理\"><a href=\"#server对AppendEntries-RPC的处理\" class=\"headerlink\" title=\"server对AppendEntries RPC的处理\"></a>server对<code>AppendEntries RPC</code>的处理</h3><p>同样，raft中的term可以作为判断是不是最新的依据，根据Figure 2，server在处理<code>AppendEntries RPC</code>，有如下注意点：</p>\n<ul>\n<li>如果<code>args.Term &lt; rf.currentTerm</code>，<code>reply.Term = rf.currentTerm</code>;</li>\n<li>如果<code>args.Term &gt; rf.currentTerm</code>，更新当前的term并且将状态改变为FOLLOWER（针对当前状态为CANDIDATE的server）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">AppendEntries</span><span class=\"params\">(args *AppendEntriesArgs, reply *AppendEntriesReply)</span></span> &#123;</div><div class=\"line\">\trf.mu.Lock()</div><div class=\"line\">\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t<span class=\"comment\">//deal with the msg and reply</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> args.Term &lt; rf.currentTerm &#123;</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">false</span></div><div class=\"line\">\t\treply.Term = rf.currentTerm</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> args.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\trf.currentTerm = args.Term</div><div class=\"line\">\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\trf.appendCh &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"状态转变的函数\"><a href=\"#状态转变的函数\" class=\"headerlink\" title=\"状态转变的函数\"></a>状态转变的函数</h3><p>需要注意的是当转变成FOLLOWER时，要将自己的<code>VoteFor</code>初始化为-1，当转变成CANDIDATE时候要注意开始选举LEADER<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">updateStateTo</span><span class=\"params\">(state <span class=\"keyword\">int32</span>)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> rf.isState(state) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tstateDesc := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"FOLLOWER\"</span>, <span class=\"string\">\"CANDIDATE\"</span>, <span class=\"string\">\"LEADER\"</span>&#125;</div><div class=\"line\">\tpreState := rf.state</div><div class=\"line\">\t<span class=\"keyword\">switch</span> state &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> FOLLOWER:</div><div class=\"line\">\t\trf.state = FOLLOWER</div><div class=\"line\">\t\trf.votedFor = <span class=\"number\">-1</span></div><div class=\"line\">\t<span class=\"keyword\">case</span> CANDIDATE:</div><div class=\"line\">\t\trf.state = CANDIDATE</div><div class=\"line\">\t\trf.startElection()</div><div class=\"line\">\t<span class=\"keyword\">case</span> LEADER:</div><div class=\"line\">\t\trf.state = LEADER</div><div class=\"line\">\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Warning: invalid state %d, do nothing.\\n\"</span>, state)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"In term %d: Server %d transfer from %s to %s\\n\"</span>,</div><div class=\"line\">\t\trf.currentTerm, rf.me, stateDesc[preState], stateDesc[rf.state])</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"开始新一轮选举的函数\"><a href=\"#开始新一轮选举的函数\" class=\"headerlink\" title=\"开始新一轮选举的函数\"></a>开始新一轮选举的函数</h3><p>按照论文的要求在开始选举新的LEADER的时候要重置计时器，因为CANDIDATE会为自己投票所以票数初始置为1<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">startElection</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\trf.incrementTerm()  <span class=\"comment\">//first increase current term</span></div><div class=\"line\">\trf.votedFor = rf.me <span class=\"comment\">//vote for self</span></div><div class=\"line\">\trf.voteAcquired = <span class=\"number\">1</span> <span class=\"comment\">//acquire self's vote</span></div><div class=\"line\">\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\trf.broadcastVoteReq()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"整个状态的循环实现\"><a href=\"#整个状态的循环实现\" class=\"headerlink\" title=\"整个状态的循环实现\"></a>整个状态的循环实现</h4><p>不断的循环，并根据当前server的角色进行不同的操作</p>\n<h4 id=\"FOLLOWER\"><a href=\"#FOLLOWER\" class=\"headerlink\" title=\"FOLLOWER\"></a>FOLLOWER</h4><ul>\n<li>当收到CANDIDATE发送的<code>VoteRequest RPC</code>时，重置计时器</li>\n<li>当收到LEADER发送的<code>AppendEntries RPC</code>时，重置计时器</li>\n<li>当计时器结束时，说明当前的server断绝联系，于是FOLLOWER转变为CANDIDATE开始新一轮的选举</li>\n</ul>\n<h4 id=\"CANDIDATE\"><a href=\"#CANDIDATE\" class=\"headerlink\" title=\"CANDIDATE\"></a>CANDIDATE</h4><ul>\n<li>在收到<code>AppendEntries RPC</code>时，说明LEADER依旧存在，停止选举转变为FOLLOWER</li>\n<li>当计时器结束时，重新开始选举</li>\n<li>当投票数大于总数的一半时，当选LEADER</li>\n</ul>\n<h4 id=\"LEADER\"><a href=\"#LEADER\" class=\"headerlink\" title=\"LEADER\"></a>LEADER</h4><ul>\n<li>间隔一段时间发送<code>HeartBeat</code>心跳包维持LEADER和其他的server的通信</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">startLoop</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\trf.electionTimer = time.NewTimer(randElectionDuration())</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> atomic.LoadInt32(&amp;rf.state) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> FOLLOWER:</div><div class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.voteCh:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.appendCh:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.electionTimer.C:</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//time out</span></div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\trf.updateStateTo(CANDIDATE)</div><div class=\"line\">\t\t\t\trf.mu.Unlock()</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> CANDIDATE:</div><div class=\"line\">\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.appendCh:</div><div class=\"line\">\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.electionTimer.C:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t\trf.startElection()</div><div class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> rf.voteAcquired &gt; <span class=\"built_in\">len</span>(rf.peers)/<span class=\"number\">2</span> &#123;</div><div class=\"line\">\t\t\t\t\trf.updateStateTo(LEADER)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\trf.mu.Unlock()</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> LEADER:</div><div class=\"line\">\t\t\trf.broadcastAppendEnrties()</div><div class=\"line\">\t\t\ttime.Sleep(HEARTBEAT_INTERVAL * time.Millisecond)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"初始化并开始循环\"><a href=\"#初始化并开始循环\" class=\"headerlink\" title=\"初始化并开始循环\"></a>初始化并开始循环</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Make</span><span class=\"params\">(peers []*labrpc.ClientEnd, me <span class=\"keyword\">int</span>,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\tpersister *Persister, applyCh <span class=\"keyword\">chan</span> ApplyMsg)</span> *<span class=\"title\">Raft</span></span> &#123;</div><div class=\"line\">\trf := &amp;Raft&#123;&#125;</div><div class=\"line\">\trf.peers = peers</div><div class=\"line\">\trf.persister = persister</div><div class=\"line\">\trf.me = me</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Your initialization code here (2A, 2B, 2C).</span></div><div class=\"line\">\trf.state = FOLLOWER</div><div class=\"line\">\trf.votedFor = <span class=\"number\">-1</span></div><div class=\"line\">\trf.voteCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\">\trf.appendCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// initialize from state persisted before a crash</span></div><div class=\"line\">\trf.readPersist(persister.ReadRaftState())</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> rf.startLoop()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> rf</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><hr>\n<p>第一次将论文中的算法“实现”，虽然是参考了大神的代码，还是觉得收获满满。<br>首先，纠正了我看论文一目十行的方法，以前总觉得论文这东西太虚，只是所谓的想法，经过这次无数遍的研读之后，发现论文中的每一句话对于整个算法的执行都有至关重要的作用。因此，以后在看论文的时候，需要逐句理解，最好能够抽象出整个模型，并且思考论文这么做对于整个系统的实现有什么好处<br>其次，自己的代码的能力实在是弱的不行，我能看得懂这些代码，并能在脑中把每一个函数链接起来，但是距离完全靠自己的能力去实现一个这样的系统还有相当长的路要走。<br>希望能坚持将自己所看的论文、方法都能用自己的话去说出来，加深下理解。</p>\n"},{"title":"The Concurrency on Go","date":"2017-10-25T11:17:29.000Z","_content":"之前在学习MIT6.824的实验中，遇到了大量考虑程序并发性的内容，而go语言的特色之处就是在对并发性的支持上，因此我们来总结一下go语言在并发性方面的编程，希望给自己加深一下理解\n\n## goroutinue\ngoroutine在我的理解中就是快速的开辟一个线程执行相应的函数\n`go f(x, y, z)`\n在新的线程中执行\n`f(x, y, z)`\n```go\npackage main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc say(s string) {\n\tfor i := 0; i < 5; i++ {\n\t\ttime.Sleep(100 * time.Millisecond)\n\t\tfmt.Println(s)\n\t}\n}\nfunc main() {\n\tgo say(\"world\")\n\tsay(\"hello\")\n}\n```\n执行的结果为\n{% asset_image all_1.png %}\n\n## channel\n\nchannel在我理解是一个信道，信道中传输的数据类型可以是任意的，在另一端准备好之前，发送端和接收端都会被阻塞，在接收端接收的顺序是**先进先出**，类似于队列。\n```go\nch <- v\nx := <- ch\n```\n这一段代码的意思是在发送方将v送入，在接收端用x去接收,channel在使用前必须创建，\n`ch := make(chan int)`\n实验的代码如下所示\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc sum(a []int, c chan int) {\n\tsum := 0\n\tfor _, v := range a {\n\t\tsum += v\n\t}\n\tc <- sum // 将和送入 c\n}\n\nfunc main() {\n\ta := []int{7, 2, 8, -9, 4, 0}\n\tc := make(chan int)\n\tgo sum(a[:len(a)/2], c)\n\tgo sum(a[len(a)/2:], c)\n\tx := <-c\n\ty := <-c\n\tfmt.Println(x, y, x+y)\n}\n```\n代码的执行结果如下所示：\n`17 -5 12`\n由于此处使用的channel不带有缓冲，每在channel中放入一个变量，在取走之前`c <- sum`之前的代码阻塞，直到channel中的变量被取走，程序才会继续执行\n\n## 带有缓冲的channel\n\n带有缓冲的channel在构建时，`make()`的第二个参数作为缓冲区的大小\n向缓冲区填充变量的时候，只有当缓冲区满的时候发送数据程序会阻塞，而当缓冲区为空的时候，接收变量的程序会阻塞\n\n## range 和 close\n`range`可以源源不断的从channel中读取数据直到关闭\n`close`可以关闭channel表示再也没有值被发送了\n`v, ok = <- ch`可以用来测试channel是否被关闭，若关闭ok的返回值为`false`\n实验的代码如下所示：\n\n```go\npackage main\nimport (\n\t\"fmt\"\n)\nfunc fibonacci(n int, c chan int) {\n\tx, y := 0, 1\n\tfor i := 0; i < n; i++ {\n\t\tc <- x\n\t\tx, y = y, x+y\n\t}\n\tclose(c)\n}\nfunc main() {\n\tc := make(chan int, 10)\n\tgo fibonacci(cap(c), c)\n\tfor i := range c {\n\t\tfmt.Println(i)\n\t}\n\t_, ok := <-c\n\tfmt.Print(ok)\n}\n```\n实验中实现的是打印斐波那契数列中的前10个数字，当产生完10个数字并全部放入缓冲区后，程序阻塞，主程序中的`range`开始读取channel缓存，当读取完毕后，函数`fibonacci()`关闭了channel，于是`ok = false`\n\n实验的结果如下所示：\n\n{% asset_image test4.png %}\n\n## select\n`select`有两种执行情况\n\n1. 阻塞直到条件分支中的某个分支可以执行时，便会执行这个分支\n2. 当有多个分支符合条件的时候，便会随机选择一个分支执行\n\n\n实验的代码如下所示：\n```go\npackage main\n\nimport \"fmt\"\n\nfunc fibonacci(c, quit chan int) {\n\tx, y := 0, 1\n\tfor {\n\t\tselect {\n\t\tcase c <- x:\n\t\t\tx, y = y, x+y\n\t\tcase <-quit:\n\t\t\tfmt.Println(\"quit\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc main() {\n\tc := make(chan int)\n\tquit := make(chan int)\n\tgo func() {\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tfmt.Println(<-c)\n\t\t}\n\t\tquit <- 0\n\t}()\n\tfibonacci(c, quit)\n}\n```\n实验的结果如下图所示：\n{% asset_image test5.png %}\n\n### 结果解析\n\n1. 序先执行至`fmt.Println(<-c)`时阻塞,接收程序缓冲区为空\n2. 在`fibonacci()`函数中,`select`语句智能选择往channel c中放入数据，由于`quit`为空，一直阻塞\n3. 当打印完成结果后，`quit <- 0`执行，`select`可以执行`case <- quit`之后的代码，打印`quit`并返回主程序\n\n### 默认选择\n\n当`select`中的其他条件分支都没有准备好的时候`default`分支会被执行\n通常用作非阻塞的发送或接收程序\n\n## sync.Mutex\n当我们不需要在goroutine中通信时，我们可以使用互斥锁在使用**共享**资源时进行封锁，使用结束后进行解锁\ngo库中提供了`sync.Mutex`类型以及两个方法：\n`Lock()`\n`Unlock()`\n参考的代码如下所示：\n\n\n```go\nfunc (c *SafeCounter) Inc(key string) {\n\tc.mux.Lock()\n\t// Lock 之后同一时刻只有一个 goroutine 能访问 c.v\n\tc.v[key]++\n\tc.mux.Unlock()\n}\n```\n\n在增加`c.v[key]`之前先对其进行封锁，使用结束后解锁，而在定义这个可以封锁的资源时，我们采用了结构体的方式，将这个互斥锁**绑定**在资源上\n```go\ntype SafeCounter struct {\n\tv   map[string]int\n\tmux sync.Mutex\n}\n```\n## 多种方式的crawer\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\n//\n// Several solutions to the crawler exercise from the Go tutorial (https://tour.golang.org/concurrency/10)\n//\n\n//\n// Serial crawler\n//\n\nfunc CrawlSerial(url string, fetcher Fetcher, fetched map[string]bool) {\n\tif fetched[url] {\n\t\treturn\n\t}\n\tfetched[url] = true\n\tbody, urls, err := fetcher.Fetch(url)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Printf(\"found: %s %q\\n\", url, body)\n\tfor _, u := range urls {\n\t\tCrawlSerial(u, fetcher, fetched)\n\t}\n\treturn\n}\n\n//\n// Concurrent crawler with Mutex and WaitGroup\n//\n\ntype fetchState struct {\n\tmu      sync.Mutex\n\tfetched map[string]bool\n}\n\nfunc (f *fetchState) CheckAndMark(url string) bool {\n\t//defer f.mu.Unlock()\n\n\t//f.mu.Lock()\n\tif f.fetched[url] {\n\t\treturn true\n\t}\n\tf.fetched[url] = true\n\treturn false\n}\n\nfunc mkFetchState() *fetchState {\n\tf := &fetchState{}\n\tf.fetched = make(map[string]bool)\n\treturn f\n}\n\nfunc CrawlConcurrentMutex(url string, fetcher Fetcher, f *fetchState) {\n\tif f.CheckAndMark(url) {\n\t\treturn\n\t}\n\n\tbody, urls, err := fetcher.Fetch(url)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Printf(\"found: %s %q\\n\", url, body)\n\tvar done sync.WaitGroup\n\tfor _, u := range urls {\n\t\tdone.Add(1)\n\t\tgo func(u string) {\n\t\t\tdefer done.Done()\n\t\t\tCrawlConcurrentMutex(u, fetcher, f)\n\t\t}(u) // Without the u argument there is a race\n\t}\n\tdone.Wait()\n\treturn\n}\n\n//\n// Concurrent crawler with channels\n//\n\nfunc dofetch(url1 string, ch chan []string, fetcher Fetcher) {\n\tbody, urls, err := fetcher.Fetch(url1)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tch <- []string{}\n\t} else {\n\t\tfmt.Printf(\"found: %s %q\\n\", url1, body)\n\t\tch <- urls\n\t}\n}\n\nfunc master(ch chan []string, fetcher Fetcher) {\n\tn := 1\n\tfetched := make(map[string]bool)\n\tfor urls := range ch {\n\t\tfor _, u := range urls {\n\t\t\tif _, ok := fetched[u]; ok == false {\n\t\t\t\tfetched[u] = true\n\t\t\t\tn += 1\n\t\t\t\tgo dofetch(u, ch, fetcher)\n\t\t\t}\n\t\t}\n\t\tn -= 1\n\t\tif n == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc CrawlConcurrentChannel(url string, fetcher Fetcher) {\n\tch := make(chan []string)\n\tgo func() {\n\t\tch <- []string{url}\n\t}()\n\tmaster(ch, fetcher)\n}\n\n//\n// main\n//\n\nfunc main() {\n\tfmt.Printf(\"=== Serial===\\n\")\n\tCrawlSerial(\"http://golang.org/\", fetcher, make(map[string]bool))\n\n\tfmt.Printf(\"=== ConcurrentMutex ===\\n\")\n\tCrawlConcurrentMutex(\"http://golang.org/\", fetcher, mkFetchState())\n\n\tfmt.Printf(\"=== ConcurrentChannel ===\\n\")\n\tCrawlConcurrentChannel(\"http://golang.org/\", fetcher)\n}\n\n//\n// Fetcher\n//\n\ntype Fetcher interface {\n\t// Fetch returns the body of URL and\n\t// a slice of URLs found on that page.\n\tFetch(url string) (body string, urls []string, err error)\n}\n\n// fakeFetcher is Fetcher that returns canned results.\ntype fakeFetcher map[string]*fakeResult\n\ntype fakeResult struct {\n\tbody string\n\turls []string\n}\n\nfunc (f fakeFetcher) Fetch(url string) (string, []string, error) {\n\tif res, ok := f[url]; ok {\n\t\treturn res.body, res.urls, nil\n\t}\n\treturn \"\", nil, fmt.Errorf(\"not found: %s\", url)\n}\n\n// fetcher is a populated fakeFetcher.\nvar fetcher = fakeFetcher{\n\t\"http://golang.org/\": &fakeResult{\n\t\t\"The Go Programming Language\",\n\t\t[]string{\n\t\t\t\"http://golang.org/pkg/\",\n\t\t\t\"http://golang.org/cmd/\",\n\t\t},\n\t},\n\t\"http://golang.org/pkg/\": &fakeResult{\n\t\t\"Packages\",\n\t\t[]string{\n\t\t\t\"http://golang.org/\",\n\t\t\t\"http://golang.org/cmd/\",\n\t\t\t\"http://golang.org/pkg/fmt/\",\n\t\t\t\"http://golang.org/pkg/os/\",\n\t\t},\n\t},\n\t\"http://golang.org/pkg/fmt/\": &fakeResult{\n\t\t\"Package fmt\",\n\t\t[]string{\n\t\t\t\"http://golang.org/\",\n\t\t\t\"http://golang.org/pkg/\",\n\t\t},\n\t},\n\t\"http://golang.org/pkg/os/\": &fakeResult{\n\t\t\"Package os\",\n\t\t[]string{\n\t\t\t\"http://golang.org/\",\n\t\t\t\"http://golang.org/pkg/\",\n\t\t},\n\t},\n}\n```\n\n### 代码解析\n\n\n\n\n\n\n\n\n\n","source":"_posts/the-concurrency-on-go.md","raw":"---\ntitle: The Concurrency on Go\ndate: 2017-10-25 19:17:29\ncategories:\n- golang\ntags:\n- concurrency\n---\n之前在学习MIT6.824的实验中，遇到了大量考虑程序并发性的内容，而go语言的特色之处就是在对并发性的支持上，因此我们来总结一下go语言在并发性方面的编程，希望给自己加深一下理解\n\n## goroutinue\ngoroutine在我的理解中就是快速的开辟一个线程执行相应的函数\n`go f(x, y, z)`\n在新的线程中执行\n`f(x, y, z)`\n```go\npackage main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc say(s string) {\n\tfor i := 0; i < 5; i++ {\n\t\ttime.Sleep(100 * time.Millisecond)\n\t\tfmt.Println(s)\n\t}\n}\nfunc main() {\n\tgo say(\"world\")\n\tsay(\"hello\")\n}\n```\n执行的结果为\n{% asset_image all_1.png %}\n\n## channel\n\nchannel在我理解是一个信道，信道中传输的数据类型可以是任意的，在另一端准备好之前，发送端和接收端都会被阻塞，在接收端接收的顺序是**先进先出**，类似于队列。\n```go\nch <- v\nx := <- ch\n```\n这一段代码的意思是在发送方将v送入，在接收端用x去接收,channel在使用前必须创建，\n`ch := make(chan int)`\n实验的代码如下所示\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc sum(a []int, c chan int) {\n\tsum := 0\n\tfor _, v := range a {\n\t\tsum += v\n\t}\n\tc <- sum // 将和送入 c\n}\n\nfunc main() {\n\ta := []int{7, 2, 8, -9, 4, 0}\n\tc := make(chan int)\n\tgo sum(a[:len(a)/2], c)\n\tgo sum(a[len(a)/2:], c)\n\tx := <-c\n\ty := <-c\n\tfmt.Println(x, y, x+y)\n}\n```\n代码的执行结果如下所示：\n`17 -5 12`\n由于此处使用的channel不带有缓冲，每在channel中放入一个变量，在取走之前`c <- sum`之前的代码阻塞，直到channel中的变量被取走，程序才会继续执行\n\n## 带有缓冲的channel\n\n带有缓冲的channel在构建时，`make()`的第二个参数作为缓冲区的大小\n向缓冲区填充变量的时候，只有当缓冲区满的时候发送数据程序会阻塞，而当缓冲区为空的时候，接收变量的程序会阻塞\n\n## range 和 close\n`range`可以源源不断的从channel中读取数据直到关闭\n`close`可以关闭channel表示再也没有值被发送了\n`v, ok = <- ch`可以用来测试channel是否被关闭，若关闭ok的返回值为`false`\n实验的代码如下所示：\n\n```go\npackage main\nimport (\n\t\"fmt\"\n)\nfunc fibonacci(n int, c chan int) {\n\tx, y := 0, 1\n\tfor i := 0; i < n; i++ {\n\t\tc <- x\n\t\tx, y = y, x+y\n\t}\n\tclose(c)\n}\nfunc main() {\n\tc := make(chan int, 10)\n\tgo fibonacci(cap(c), c)\n\tfor i := range c {\n\t\tfmt.Println(i)\n\t}\n\t_, ok := <-c\n\tfmt.Print(ok)\n}\n```\n实验中实现的是打印斐波那契数列中的前10个数字，当产生完10个数字并全部放入缓冲区后，程序阻塞，主程序中的`range`开始读取channel缓存，当读取完毕后，函数`fibonacci()`关闭了channel，于是`ok = false`\n\n实验的结果如下所示：\n\n{% asset_image test4.png %}\n\n## select\n`select`有两种执行情况\n\n1. 阻塞直到条件分支中的某个分支可以执行时，便会执行这个分支\n2. 当有多个分支符合条件的时候，便会随机选择一个分支执行\n\n\n实验的代码如下所示：\n```go\npackage main\n\nimport \"fmt\"\n\nfunc fibonacci(c, quit chan int) {\n\tx, y := 0, 1\n\tfor {\n\t\tselect {\n\t\tcase c <- x:\n\t\t\tx, y = y, x+y\n\t\tcase <-quit:\n\t\t\tfmt.Println(\"quit\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc main() {\n\tc := make(chan int)\n\tquit := make(chan int)\n\tgo func() {\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tfmt.Println(<-c)\n\t\t}\n\t\tquit <- 0\n\t}()\n\tfibonacci(c, quit)\n}\n```\n实验的结果如下图所示：\n{% asset_image test5.png %}\n\n### 结果解析\n\n1. 序先执行至`fmt.Println(<-c)`时阻塞,接收程序缓冲区为空\n2. 在`fibonacci()`函数中,`select`语句智能选择往channel c中放入数据，由于`quit`为空，一直阻塞\n3. 当打印完成结果后，`quit <- 0`执行，`select`可以执行`case <- quit`之后的代码，打印`quit`并返回主程序\n\n### 默认选择\n\n当`select`中的其他条件分支都没有准备好的时候`default`分支会被执行\n通常用作非阻塞的发送或接收程序\n\n## sync.Mutex\n当我们不需要在goroutine中通信时，我们可以使用互斥锁在使用**共享**资源时进行封锁，使用结束后进行解锁\ngo库中提供了`sync.Mutex`类型以及两个方法：\n`Lock()`\n`Unlock()`\n参考的代码如下所示：\n\n\n```go\nfunc (c *SafeCounter) Inc(key string) {\n\tc.mux.Lock()\n\t// Lock 之后同一时刻只有一个 goroutine 能访问 c.v\n\tc.v[key]++\n\tc.mux.Unlock()\n}\n```\n\n在增加`c.v[key]`之前先对其进行封锁，使用结束后解锁，而在定义这个可以封锁的资源时，我们采用了结构体的方式，将这个互斥锁**绑定**在资源上\n```go\ntype SafeCounter struct {\n\tv   map[string]int\n\tmux sync.Mutex\n}\n```\n## 多种方式的crawer\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\n//\n// Several solutions to the crawler exercise from the Go tutorial (https://tour.golang.org/concurrency/10)\n//\n\n//\n// Serial crawler\n//\n\nfunc CrawlSerial(url string, fetcher Fetcher, fetched map[string]bool) {\n\tif fetched[url] {\n\t\treturn\n\t}\n\tfetched[url] = true\n\tbody, urls, err := fetcher.Fetch(url)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Printf(\"found: %s %q\\n\", url, body)\n\tfor _, u := range urls {\n\t\tCrawlSerial(u, fetcher, fetched)\n\t}\n\treturn\n}\n\n//\n// Concurrent crawler with Mutex and WaitGroup\n//\n\ntype fetchState struct {\n\tmu      sync.Mutex\n\tfetched map[string]bool\n}\n\nfunc (f *fetchState) CheckAndMark(url string) bool {\n\t//defer f.mu.Unlock()\n\n\t//f.mu.Lock()\n\tif f.fetched[url] {\n\t\treturn true\n\t}\n\tf.fetched[url] = true\n\treturn false\n}\n\nfunc mkFetchState() *fetchState {\n\tf := &fetchState{}\n\tf.fetched = make(map[string]bool)\n\treturn f\n}\n\nfunc CrawlConcurrentMutex(url string, fetcher Fetcher, f *fetchState) {\n\tif f.CheckAndMark(url) {\n\t\treturn\n\t}\n\n\tbody, urls, err := fetcher.Fetch(url)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Printf(\"found: %s %q\\n\", url, body)\n\tvar done sync.WaitGroup\n\tfor _, u := range urls {\n\t\tdone.Add(1)\n\t\tgo func(u string) {\n\t\t\tdefer done.Done()\n\t\t\tCrawlConcurrentMutex(u, fetcher, f)\n\t\t}(u) // Without the u argument there is a race\n\t}\n\tdone.Wait()\n\treturn\n}\n\n//\n// Concurrent crawler with channels\n//\n\nfunc dofetch(url1 string, ch chan []string, fetcher Fetcher) {\n\tbody, urls, err := fetcher.Fetch(url1)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tch <- []string{}\n\t} else {\n\t\tfmt.Printf(\"found: %s %q\\n\", url1, body)\n\t\tch <- urls\n\t}\n}\n\nfunc master(ch chan []string, fetcher Fetcher) {\n\tn := 1\n\tfetched := make(map[string]bool)\n\tfor urls := range ch {\n\t\tfor _, u := range urls {\n\t\t\tif _, ok := fetched[u]; ok == false {\n\t\t\t\tfetched[u] = true\n\t\t\t\tn += 1\n\t\t\t\tgo dofetch(u, ch, fetcher)\n\t\t\t}\n\t\t}\n\t\tn -= 1\n\t\tif n == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc CrawlConcurrentChannel(url string, fetcher Fetcher) {\n\tch := make(chan []string)\n\tgo func() {\n\t\tch <- []string{url}\n\t}()\n\tmaster(ch, fetcher)\n}\n\n//\n// main\n//\n\nfunc main() {\n\tfmt.Printf(\"=== Serial===\\n\")\n\tCrawlSerial(\"http://golang.org/\", fetcher, make(map[string]bool))\n\n\tfmt.Printf(\"=== ConcurrentMutex ===\\n\")\n\tCrawlConcurrentMutex(\"http://golang.org/\", fetcher, mkFetchState())\n\n\tfmt.Printf(\"=== ConcurrentChannel ===\\n\")\n\tCrawlConcurrentChannel(\"http://golang.org/\", fetcher)\n}\n\n//\n// Fetcher\n//\n\ntype Fetcher interface {\n\t// Fetch returns the body of URL and\n\t// a slice of URLs found on that page.\n\tFetch(url string) (body string, urls []string, err error)\n}\n\n// fakeFetcher is Fetcher that returns canned results.\ntype fakeFetcher map[string]*fakeResult\n\ntype fakeResult struct {\n\tbody string\n\turls []string\n}\n\nfunc (f fakeFetcher) Fetch(url string) (string, []string, error) {\n\tif res, ok := f[url]; ok {\n\t\treturn res.body, res.urls, nil\n\t}\n\treturn \"\", nil, fmt.Errorf(\"not found: %s\", url)\n}\n\n// fetcher is a populated fakeFetcher.\nvar fetcher = fakeFetcher{\n\t\"http://golang.org/\": &fakeResult{\n\t\t\"The Go Programming Language\",\n\t\t[]string{\n\t\t\t\"http://golang.org/pkg/\",\n\t\t\t\"http://golang.org/cmd/\",\n\t\t},\n\t},\n\t\"http://golang.org/pkg/\": &fakeResult{\n\t\t\"Packages\",\n\t\t[]string{\n\t\t\t\"http://golang.org/\",\n\t\t\t\"http://golang.org/cmd/\",\n\t\t\t\"http://golang.org/pkg/fmt/\",\n\t\t\t\"http://golang.org/pkg/os/\",\n\t\t},\n\t},\n\t\"http://golang.org/pkg/fmt/\": &fakeResult{\n\t\t\"Package fmt\",\n\t\t[]string{\n\t\t\t\"http://golang.org/\",\n\t\t\t\"http://golang.org/pkg/\",\n\t\t},\n\t},\n\t\"http://golang.org/pkg/os/\": &fakeResult{\n\t\t\"Package os\",\n\t\t[]string{\n\t\t\t\"http://golang.org/\",\n\t\t\t\"http://golang.org/pkg/\",\n\t\t},\n\t},\n}\n```\n\n### 代码解析\n\n\n\n\n\n\n\n\n\n","slug":"the-concurrency-on-go","published":1,"updated":"2017-10-25T14:26:13.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj97qbofr000ansumrg2kwoig","content":"<p>之前在学习MIT6.824的实验中，遇到了大量考虑程序并发性的内容，而go语言的特色之处就是在对并发性的支持上，因此我们来总结一下go语言在并发性方面的编程，希望给自己加深一下理解</p>\n<h2 id=\"goroutinue\"><a href=\"#goroutinue\" class=\"headerlink\" title=\"goroutinue\"></a>goroutinue</h2><p>goroutine在我的理解中就是快速的开辟一个线程执行相应的函数<br><code>go f(x, y, z)</code><br>在新的线程中执行<br><code>f(x, y, z)</code><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</div><div class=\"line\">\t\ttime.Sleep(<span class=\"number\">100</span> * time.Millisecond)</div><div class=\"line\">\t\tfmt.Println(s)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">go</span> say(<span class=\"string\">\"world\"</span>)</div><div class=\"line\">\tsay(<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行的结果为<br><img src=\"/2017/10/25/the-concurrency-on-go/all_1.png\" alt=\"all_1.png\" title=\"\"></p>\n<h2 id=\"channel\"><a href=\"#channel\" class=\"headerlink\" title=\"channel\"></a>channel</h2><p>channel在我理解是一个信道，信道中传输的数据类型可以是任意的，在另一端准备好之前，发送端和接收端都会被阻塞，在接收端接收的顺序是<strong>先进先出</strong>，类似于队列。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ch &lt;- v</div><div class=\"line\">x := &lt;- ch</div></pre></td></tr></table></figure></p>\n<p>这一段代码的意思是在发送方将v送入，在接收端用x去接收,channel在使用前必须创建，<br><code>ch := make(chan int)</code><br>实验的代码如下所示</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a []<span class=\"keyword\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tsum := <span class=\"number\">0</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> a &#123;</div><div class=\"line\">\t\tsum += v</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tc &lt;- sum <span class=\"comment\">// 将和送入 c</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ta := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">-9</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;</div><div class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">\t<span class=\"keyword\">go</span> sum(a[:<span class=\"built_in\">len</span>(a)/<span class=\"number\">2</span>], c)</div><div class=\"line\">\t<span class=\"keyword\">go</span> sum(a[<span class=\"built_in\">len</span>(a)/<span class=\"number\">2</span>:], c)</div><div class=\"line\">\tx := &lt;-c</div><div class=\"line\">\ty := &lt;-c</div><div class=\"line\">\tfmt.Println(x, y, x+y)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码的执行结果如下所示：<br><code>17 -5 12</code><br>由于此处使用的channel不带有缓冲，每在channel中放入一个变量，在取走之前<code>c &lt;- sum</code>之前的代码阻塞，直到channel中的变量被取走，程序才会继续执行</p>\n<h2 id=\"带有缓冲的channel\"><a href=\"#带有缓冲的channel\" class=\"headerlink\" title=\"带有缓冲的channel\"></a>带有缓冲的channel</h2><p>带有缓冲的channel在构建时，<code>make()</code>的第二个参数作为缓冲区的大小<br>向缓冲区填充变量的时候，只有当缓冲区满的时候发送数据程序会阻塞，而当缓冲区为空的时候，接收变量的程序会阻塞</p>\n<h2 id=\"range-和-close\"><a href=\"#range-和-close\" class=\"headerlink\" title=\"range 和 close\"></a>range 和 close</h2><p><code>range</code>可以源源不断的从channel中读取数据直到关闭<br><code>close</code>可以关闭channel表示再也没有值被发送了<br><code>v, ok = &lt;- ch</code>可以用来测试channel是否被关闭，若关闭ok的返回值为<code>false</code><br>实验的代码如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"keyword\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tx, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</div><div class=\"line\">\t\tc &lt;- x</div><div class=\"line\">\t\tx, y = y, x+y</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">close</span>(c)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">go</span> fibonacci(<span class=\"built_in\">cap</span>(c), c)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> c &#123;</div><div class=\"line\">\t\tfmt.Println(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t_, ok := &lt;-c</div><div class=\"line\">\tfmt.Print(ok)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实验中实现的是打印斐波那契数列中的前10个数字，当产生完10个数字并全部放入缓冲区后，程序阻塞，主程序中的<code>range</code>开始读取channel缓存，当读取完毕后，函数<code>fibonacci()</code>关闭了channel，于是<code>ok = false</code></p>\n<p>实验的结果如下所示：</p>\n<img src=\"/2017/10/25/the-concurrency-on-go/test4.png\" alt=\"test4.png\" title=\"\">\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h2><p><code>select</code>有两种执行情况</p>\n<ol>\n<li>阻塞直到条件分支中的某个分支可以执行时，便会执行这个分支</li>\n<li>当有多个分支符合条件的时候，便会随机选择一个分支执行</li>\n</ol>\n<p>实验的代码如下所示：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(c, quit <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tx, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> c &lt;- x:</div><div class=\"line\">\t\t\tx, y = y, x+y</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-quit:</div><div class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"quit\"</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">\tquit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</div><div class=\"line\">\t\t\tfmt.Println(&lt;-c)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tquit &lt;- <span class=\"number\">0</span></div><div class=\"line\">\t&#125;()</div><div class=\"line\">\tfibonacci(c, quit)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实验的结果如下图所示：<br><img src=\"/2017/10/25/the-concurrency-on-go/test5.png\" alt=\"test5.png\" title=\"\"></p>\n<h3 id=\"结果解析\"><a href=\"#结果解析\" class=\"headerlink\" title=\"结果解析\"></a>结果解析</h3><ol>\n<li>序先执行至<code>fmt.Println(&lt;-c)</code>时阻塞,接收程序缓冲区为空</li>\n<li>在<code>fibonacci()</code>函数中,<code>select</code>语句智能选择往channel c中放入数据，由于<code>quit</code>为空，一直阻塞</li>\n<li>当打印完成结果后，<code>quit &lt;- 0</code>执行，<code>select</code>可以执行<code>case &lt;- quit</code>之后的代码，打印<code>quit</code>并返回主程序</li>\n</ol>\n<h3 id=\"默认选择\"><a href=\"#默认选择\" class=\"headerlink\" title=\"默认选择\"></a>默认选择</h3><p>当<code>select</code>中的其他条件分支都没有准备好的时候<code>default</code>分支会被执行<br>通常用作非阻塞的发送或接收程序</p>\n<h2 id=\"sync-Mutex\"><a href=\"#sync-Mutex\" class=\"headerlink\" title=\"sync.Mutex\"></a>sync.Mutex</h2><p>当我们不需要在goroutine中通信时，我们可以使用互斥锁在使用<strong>共享</strong>资源时进行封锁，使用结束后进行解锁<br>go库中提供了<code>sync.Mutex</code>类型以及两个方法：<br><code>Lock()</code><br><code>Unlock()</code><br>参考的代码如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *SafeCounter)</span> <span class=\"title\">Inc</span><span class=\"params\">(key <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">\tc.mux.Lock()</div><div class=\"line\">\t<span class=\"comment\">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span></div><div class=\"line\">\tc.v[key]++</div><div class=\"line\">\tc.mux.Unlock()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在增加<code>c.v[key]</code>之前先对其进行封锁，使用结束后解锁，而在定义这个可以封锁的资源时，我们采用了结构体的方式，将这个互斥锁<strong>绑定</strong>在资源上<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> SafeCounter <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tv   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></div><div class=\"line\">\tmux sync.Mutex</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"多种方式的crawer\"><a href=\"#多种方式的crawer\" class=\"headerlink\" title=\"多种方式的crawer\"></a>多种方式的crawer</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Several solutions to the crawler exercise from the Go tutorial (https://tour.golang.org/concurrency/10)</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Serial crawler</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CrawlSerial</span><span class=\"params\">(url <span class=\"keyword\">string</span>, fetcher Fetcher, fetched <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> fetched[url] &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfetched[url] = <span class=\"literal\">true</span></div><div class=\"line\">\tbody, urls, err := fetcher.Fetch(url)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"found: %s %q\\n\"</span>, url, body)</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, u := <span class=\"keyword\">range</span> urls &#123;</div><div class=\"line\">\t\tCrawlSerial(u, fetcher, fetched)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Concurrent crawler with Mutex and WaitGroup</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> fetchState <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tmu      sync.Mutex</div><div class=\"line\">\tfetched <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *fetchState)</span> <span class=\"title\">CheckAndMark</span><span class=\"params\">(url <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">//defer f.mu.Unlock()</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//f.mu.Lock()</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> f.fetched[url] &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tf.fetched[url] = <span class=\"literal\">true</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mkFetchState</span><span class=\"params\">()</span> *<span class=\"title\">fetchState</span></span> &#123;</div><div class=\"line\">\tf := &amp;fetchState&#123;&#125;</div><div class=\"line\">\tf.fetched = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>)</div><div class=\"line\">\t<span class=\"keyword\">return</span> f</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CrawlConcurrentMutex</span><span class=\"params\">(url <span class=\"keyword\">string</span>, fetcher Fetcher, f *fetchState)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> f.CheckAndMark(url) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbody, urls, err := fetcher.Fetch(url)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"found: %s %q\\n\"</span>, url, body)</div><div class=\"line\">\t<span class=\"keyword\">var</span> done sync.WaitGroup</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, u := <span class=\"keyword\">range</span> urls &#123;</div><div class=\"line\">\t\tdone.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(u <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">defer</span> done.Done()</div><div class=\"line\">\t\t\tCrawlConcurrentMutex(u, fetcher, f)</div><div class=\"line\">\t\t&#125;(u) <span class=\"comment\">// Without the u argument there is a race</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tdone.Wait()</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Concurrent crawler with channels</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dofetch</span><span class=\"params\">(url1 <span class=\"keyword\">string</span>, ch <span class=\"keyword\">chan</span> []<span class=\"keyword\">string</span>, fetcher Fetcher)</span></span> &#123;</div><div class=\"line\">\tbody, urls, err := fetcher.Fetch(url1)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tch &lt;- []<span class=\"keyword\">string</span>&#123;&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"found: %s %q\\n\"</span>, url1, body)</div><div class=\"line\">\t\tch &lt;- urls</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">master</span><span class=\"params\">(ch <span class=\"keyword\">chan</span> []<span class=\"keyword\">string</span>, fetcher Fetcher)</span></span> &#123;</div><div class=\"line\">\tn := <span class=\"number\">1</span></div><div class=\"line\">\tfetched := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> urls := <span class=\"keyword\">range</span> ch &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> _, u := <span class=\"keyword\">range</span> urls &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> _, ok := fetched[u]; ok == <span class=\"literal\">false</span> &#123;</div><div class=\"line\">\t\t\t\tfetched[u] = <span class=\"literal\">true</span></div><div class=\"line\">\t\t\t\tn += <span class=\"number\">1</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">go</span> dofetch(u, ch, fetcher)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tn -= <span class=\"number\">1</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> n == <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CrawlConcurrentChannel</span><span class=\"params\">(url <span class=\"keyword\">string</span>, fetcher Fetcher)</span></span> &#123;</div><div class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> []<span class=\"keyword\">string</span>)</div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\tch &lt;- []<span class=\"keyword\">string</span>&#123;url&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\tmaster(ch, fetcher)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// main</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"=== Serial===\\n\"</span>)</div><div class=\"line\">\tCrawlSerial(<span class=\"string\">\"http://golang.org/\"</span>, fetcher, <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"=== ConcurrentMutex ===\\n\"</span>)</div><div class=\"line\">\tCrawlConcurrentMutex(<span class=\"string\">\"http://golang.org/\"</span>, fetcher, mkFetchState())</div><div class=\"line\"></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"=== ConcurrentChannel ===\\n\"</span>)</div><div class=\"line\">\tCrawlConcurrentChannel(<span class=\"string\">\"http://golang.org/\"</span>, fetcher)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Fetcher</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Fetcher <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Fetch returns the body of URL and</span></div><div class=\"line\">\t<span class=\"comment\">// a slice of URLs found on that page.</span></div><div class=\"line\">\tFetch(url <span class=\"keyword\">string</span>) (body <span class=\"keyword\">string</span>, urls []<span class=\"keyword\">string</span>, err error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fakeFetcher is Fetcher that returns canned results.</span></div><div class=\"line\"><span class=\"keyword\">type</span> fakeFetcher <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*fakeResult</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> fakeResult <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tbody <span class=\"keyword\">string</span></div><div class=\"line\">\turls []<span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f fakeFetcher)</span> <span class=\"title\">Fetch</span><span class=\"params\">(url <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, []<span class=\"keyword\">string</span>, error)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> res, ok := f[url]; ok &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> res.body, res.urls, <span class=\"literal\">nil</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"not found: %s\"</span>, url)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fetcher is a populated fakeFetcher.</span></div><div class=\"line\"><span class=\"keyword\">var</span> fetcher = fakeFetcher&#123;</div><div class=\"line\">\t<span class=\"string\">\"http://golang.org/\"</span>: &amp;fakeResult&#123;</div><div class=\"line\">\t\t<span class=\"string\">\"The Go Programming Language\"</span>,</div><div class=\"line\">\t\t[]<span class=\"keyword\">string</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/cmd/\"</span>,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"string\">\"http://golang.org/pkg/\"</span>: &amp;fakeResult&#123;</div><div class=\"line\">\t\t<span class=\"string\">\"Packages\"</span>,</div><div class=\"line\">\t\t[]<span class=\"keyword\">string</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/cmd/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/fmt/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/os/\"</span>,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"string\">\"http://golang.org/pkg/fmt/\"</span>: &amp;fakeResult&#123;</div><div class=\"line\">\t\t<span class=\"string\">\"Package fmt\"</span>,</div><div class=\"line\">\t\t[]<span class=\"keyword\">string</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/\"</span>,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"string\">\"http://golang.org/pkg/os/\"</span>: &amp;fakeResult&#123;</div><div class=\"line\">\t\t<span class=\"string\">\"Package os\"</span>,</div><div class=\"line\">\t\t[]<span class=\"keyword\">string</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/\"</span>,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h3>","site":{"data":{}},"excerpt":"","more":"<p>之前在学习MIT6.824的实验中，遇到了大量考虑程序并发性的内容，而go语言的特色之处就是在对并发性的支持上，因此我们来总结一下go语言在并发性方面的编程，希望给自己加深一下理解</p>\n<h2 id=\"goroutinue\"><a href=\"#goroutinue\" class=\"headerlink\" title=\"goroutinue\"></a>goroutinue</h2><p>goroutine在我的理解中就是快速的开辟一个线程执行相应的函数<br><code>go f(x, y, z)</code><br>在新的线程中执行<br><code>f(x, y, z)</code><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</div><div class=\"line\">\t\ttime.Sleep(<span class=\"number\">100</span> * time.Millisecond)</div><div class=\"line\">\t\tfmt.Println(s)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">go</span> say(<span class=\"string\">\"world\"</span>)</div><div class=\"line\">\tsay(<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行的结果为<br><img src=\"/2017/10/25/the-concurrency-on-go/all_1.png\" alt=\"all_1.png\" title=\"\"></p>\n<h2 id=\"channel\"><a href=\"#channel\" class=\"headerlink\" title=\"channel\"></a>channel</h2><p>channel在我理解是一个信道，信道中传输的数据类型可以是任意的，在另一端准备好之前，发送端和接收端都会被阻塞，在接收端接收的顺序是<strong>先进先出</strong>，类似于队列。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ch &lt;- v</div><div class=\"line\">x := &lt;- ch</div></pre></td></tr></table></figure></p>\n<p>这一段代码的意思是在发送方将v送入，在接收端用x去接收,channel在使用前必须创建，<br><code>ch := make(chan int)</code><br>实验的代码如下所示</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a []<span class=\"keyword\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tsum := <span class=\"number\">0</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> a &#123;</div><div class=\"line\">\t\tsum += v</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tc &lt;- sum <span class=\"comment\">// 将和送入 c</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ta := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">-9</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;</div><div class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">\t<span class=\"keyword\">go</span> sum(a[:<span class=\"built_in\">len</span>(a)/<span class=\"number\">2</span>], c)</div><div class=\"line\">\t<span class=\"keyword\">go</span> sum(a[<span class=\"built_in\">len</span>(a)/<span class=\"number\">2</span>:], c)</div><div class=\"line\">\tx := &lt;-c</div><div class=\"line\">\ty := &lt;-c</div><div class=\"line\">\tfmt.Println(x, y, x+y)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码的执行结果如下所示：<br><code>17 -5 12</code><br>由于此处使用的channel不带有缓冲，每在channel中放入一个变量，在取走之前<code>c &lt;- sum</code>之前的代码阻塞，直到channel中的变量被取走，程序才会继续执行</p>\n<h2 id=\"带有缓冲的channel\"><a href=\"#带有缓冲的channel\" class=\"headerlink\" title=\"带有缓冲的channel\"></a>带有缓冲的channel</h2><p>带有缓冲的channel在构建时，<code>make()</code>的第二个参数作为缓冲区的大小<br>向缓冲区填充变量的时候，只有当缓冲区满的时候发送数据程序会阻塞，而当缓冲区为空的时候，接收变量的程序会阻塞</p>\n<h2 id=\"range-和-close\"><a href=\"#range-和-close\" class=\"headerlink\" title=\"range 和 close\"></a>range 和 close</h2><p><code>range</code>可以源源不断的从channel中读取数据直到关闭<br><code>close</code>可以关闭channel表示再也没有值被发送了<br><code>v, ok = &lt;- ch</code>可以用来测试channel是否被关闭，若关闭ok的返回值为<code>false</code><br>实验的代码如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"keyword\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tx, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</div><div class=\"line\">\t\tc &lt;- x</div><div class=\"line\">\t\tx, y = y, x+y</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">close</span>(c)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">go</span> fibonacci(<span class=\"built_in\">cap</span>(c), c)</div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> c &#123;</div><div class=\"line\">\t\tfmt.Println(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t_, ok := &lt;-c</div><div class=\"line\">\tfmt.Print(ok)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实验中实现的是打印斐波那契数列中的前10个数字，当产生完10个数字并全部放入缓冲区后，程序阻塞，主程序中的<code>range</code>开始读取channel缓存，当读取完毕后，函数<code>fibonacci()</code>关闭了channel，于是<code>ok = false</code></p>\n<p>实验的结果如下所示：</p>\n<img src=\"/2017/10/25/the-concurrency-on-go/test4.png\" alt=\"test4.png\" title=\"\">\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h2><p><code>select</code>有两种执行情况</p>\n<ol>\n<li>阻塞直到条件分支中的某个分支可以执行时，便会执行这个分支</li>\n<li>当有多个分支符合条件的时候，便会随机选择一个分支执行</li>\n</ol>\n<p>实验的代码如下所示：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(c, quit <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tx, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> c &lt;- x:</div><div class=\"line\">\t\t\tx, y = y, x+y</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-quit:</div><div class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"quit\"</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">\tquit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</div><div class=\"line\">\t\t\tfmt.Println(&lt;-c)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tquit &lt;- <span class=\"number\">0</span></div><div class=\"line\">\t&#125;()</div><div class=\"line\">\tfibonacci(c, quit)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实验的结果如下图所示：<br><img src=\"/2017/10/25/the-concurrency-on-go/test5.png\" alt=\"test5.png\" title=\"\"></p>\n<h3 id=\"结果解析\"><a href=\"#结果解析\" class=\"headerlink\" title=\"结果解析\"></a>结果解析</h3><ol>\n<li>序先执行至<code>fmt.Println(&lt;-c)</code>时阻塞,接收程序缓冲区为空</li>\n<li>在<code>fibonacci()</code>函数中,<code>select</code>语句智能选择往channel c中放入数据，由于<code>quit</code>为空，一直阻塞</li>\n<li>当打印完成结果后，<code>quit &lt;- 0</code>执行，<code>select</code>可以执行<code>case &lt;- quit</code>之后的代码，打印<code>quit</code>并返回主程序</li>\n</ol>\n<h3 id=\"默认选择\"><a href=\"#默认选择\" class=\"headerlink\" title=\"默认选择\"></a>默认选择</h3><p>当<code>select</code>中的其他条件分支都没有准备好的时候<code>default</code>分支会被执行<br>通常用作非阻塞的发送或接收程序</p>\n<h2 id=\"sync-Mutex\"><a href=\"#sync-Mutex\" class=\"headerlink\" title=\"sync.Mutex\"></a>sync.Mutex</h2><p>当我们不需要在goroutine中通信时，我们可以使用互斥锁在使用<strong>共享</strong>资源时进行封锁，使用结束后进行解锁<br>go库中提供了<code>sync.Mutex</code>类型以及两个方法：<br><code>Lock()</code><br><code>Unlock()</code><br>参考的代码如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *SafeCounter)</span> <span class=\"title\">Inc</span><span class=\"params\">(key <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">\tc.mux.Lock()</div><div class=\"line\">\t<span class=\"comment\">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span></div><div class=\"line\">\tc.v[key]++</div><div class=\"line\">\tc.mux.Unlock()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在增加<code>c.v[key]</code>之前先对其进行封锁，使用结束后解锁，而在定义这个可以封锁的资源时，我们采用了结构体的方式，将这个互斥锁<strong>绑定</strong>在资源上<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> SafeCounter <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tv   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></div><div class=\"line\">\tmux sync.Mutex</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"多种方式的crawer\"><a href=\"#多种方式的crawer\" class=\"headerlink\" title=\"多种方式的crawer\"></a>多种方式的crawer</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Several solutions to the crawler exercise from the Go tutorial (https://tour.golang.org/concurrency/10)</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Serial crawler</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CrawlSerial</span><span class=\"params\">(url <span class=\"keyword\">string</span>, fetcher Fetcher, fetched <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> fetched[url] &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfetched[url] = <span class=\"literal\">true</span></div><div class=\"line\">\tbody, urls, err := fetcher.Fetch(url)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"found: %s %q\\n\"</span>, url, body)</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, u := <span class=\"keyword\">range</span> urls &#123;</div><div class=\"line\">\t\tCrawlSerial(u, fetcher, fetched)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Concurrent crawler with Mutex and WaitGroup</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> fetchState <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tmu      sync.Mutex</div><div class=\"line\">\tfetched <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *fetchState)</span> <span class=\"title\">CheckAndMark</span><span class=\"params\">(url <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">//defer f.mu.Unlock()</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//f.mu.Lock()</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> f.fetched[url] &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tf.fetched[url] = <span class=\"literal\">true</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mkFetchState</span><span class=\"params\">()</span> *<span class=\"title\">fetchState</span></span> &#123;</div><div class=\"line\">\tf := &amp;fetchState&#123;&#125;</div><div class=\"line\">\tf.fetched = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>)</div><div class=\"line\">\t<span class=\"keyword\">return</span> f</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CrawlConcurrentMutex</span><span class=\"params\">(url <span class=\"keyword\">string</span>, fetcher Fetcher, f *fetchState)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> f.CheckAndMark(url) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbody, urls, err := fetcher.Fetch(url)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"found: %s %q\\n\"</span>, url, body)</div><div class=\"line\">\t<span class=\"keyword\">var</span> done sync.WaitGroup</div><div class=\"line\">\t<span class=\"keyword\">for</span> _, u := <span class=\"keyword\">range</span> urls &#123;</div><div class=\"line\">\t\tdone.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(u <span class=\"keyword\">string</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">defer</span> done.Done()</div><div class=\"line\">\t\t\tCrawlConcurrentMutex(u, fetcher, f)</div><div class=\"line\">\t\t&#125;(u) <span class=\"comment\">// Without the u argument there is a race</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tdone.Wait()</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Concurrent crawler with channels</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dofetch</span><span class=\"params\">(url1 <span class=\"keyword\">string</span>, ch <span class=\"keyword\">chan</span> []<span class=\"keyword\">string</span>, fetcher Fetcher)</span></span> &#123;</div><div class=\"line\">\tbody, urls, err := fetcher.Fetch(url1)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tfmt.Println(err)</div><div class=\"line\">\t\tch &lt;- []<span class=\"keyword\">string</span>&#123;&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"found: %s %q\\n\"</span>, url1, body)</div><div class=\"line\">\t\tch &lt;- urls</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">master</span><span class=\"params\">(ch <span class=\"keyword\">chan</span> []<span class=\"keyword\">string</span>, fetcher Fetcher)</span></span> &#123;</div><div class=\"line\">\tn := <span class=\"number\">1</span></div><div class=\"line\">\tfetched := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>)</div><div class=\"line\">\t<span class=\"keyword\">for</span> urls := <span class=\"keyword\">range</span> ch &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> _, u := <span class=\"keyword\">range</span> urls &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> _, ok := fetched[u]; ok == <span class=\"literal\">false</span> &#123;</div><div class=\"line\">\t\t\t\tfetched[u] = <span class=\"literal\">true</span></div><div class=\"line\">\t\t\t\tn += <span class=\"number\">1</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">go</span> dofetch(u, ch, fetcher)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tn -= <span class=\"number\">1</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> n == <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CrawlConcurrentChannel</span><span class=\"params\">(url <span class=\"keyword\">string</span>, fetcher Fetcher)</span></span> &#123;</div><div class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> []<span class=\"keyword\">string</span>)</div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\tch &lt;- []<span class=\"keyword\">string</span>&#123;url&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\tmaster(ch, fetcher)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// main</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"=== Serial===\\n\"</span>)</div><div class=\"line\">\tCrawlSerial(<span class=\"string\">\"http://golang.org/\"</span>, fetcher, <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>))</div><div class=\"line\"></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"=== ConcurrentMutex ===\\n\"</span>)</div><div class=\"line\">\tCrawlConcurrentMutex(<span class=\"string\">\"http://golang.org/\"</span>, fetcher, mkFetchState())</div><div class=\"line\"></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"=== ConcurrentChannel ===\\n\"</span>)</div><div class=\"line\">\tCrawlConcurrentChannel(<span class=\"string\">\"http://golang.org/\"</span>, fetcher)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Fetcher</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Fetcher <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Fetch returns the body of URL and</span></div><div class=\"line\">\t<span class=\"comment\">// a slice of URLs found on that page.</span></div><div class=\"line\">\tFetch(url <span class=\"keyword\">string</span>) (body <span class=\"keyword\">string</span>, urls []<span class=\"keyword\">string</span>, err error)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fakeFetcher is Fetcher that returns canned results.</span></div><div class=\"line\"><span class=\"keyword\">type</span> fakeFetcher <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*fakeResult</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> fakeResult <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tbody <span class=\"keyword\">string</span></div><div class=\"line\">\turls []<span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f fakeFetcher)</span> <span class=\"title\">Fetch</span><span class=\"params\">(url <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, []<span class=\"keyword\">string</span>, error)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> res, ok := f[url]; ok &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> res.body, res.urls, <span class=\"literal\">nil</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"not found: %s\"</span>, url)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fetcher is a populated fakeFetcher.</span></div><div class=\"line\"><span class=\"keyword\">var</span> fetcher = fakeFetcher&#123;</div><div class=\"line\">\t<span class=\"string\">\"http://golang.org/\"</span>: &amp;fakeResult&#123;</div><div class=\"line\">\t\t<span class=\"string\">\"The Go Programming Language\"</span>,</div><div class=\"line\">\t\t[]<span class=\"keyword\">string</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/cmd/\"</span>,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"string\">\"http://golang.org/pkg/\"</span>: &amp;fakeResult&#123;</div><div class=\"line\">\t\t<span class=\"string\">\"Packages\"</span>,</div><div class=\"line\">\t\t[]<span class=\"keyword\">string</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/cmd/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/fmt/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/os/\"</span>,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"string\">\"http://golang.org/pkg/fmt/\"</span>: &amp;fakeResult&#123;</div><div class=\"line\">\t\t<span class=\"string\">\"Package fmt\"</span>,</div><div class=\"line\">\t\t[]<span class=\"keyword\">string</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/\"</span>,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"string\">\"http://golang.org/pkg/os/\"</span>: &amp;fakeResult&#123;</div><div class=\"line\">\t\t<span class=\"string\">\"Package os\"</span>,</div><div class=\"line\">\t\t[]<span class=\"keyword\">string</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://golang.org/pkg/\"</span>,</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t&#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h3>"}],"PostAsset":[{"_id":"source/_posts/Raft-PartA/election.png","slug":"election.png","post":"cj97qboed0000nsumzcyo91qf","modified":0,"renderable":0},{"_id":"source/_posts/Raft-PartA/raft.png","slug":"raft.png","post":"cj97qboed0000nsumzcyo91qf","modified":0,"renderable":0},{"_id":"source/_posts/the-concurrency-on-go/all_1.png","slug":"all_1.png","post":"cj97qbofr000ansumrg2kwoig","modified":0,"renderable":0},{"_id":"source/_posts/the-concurrency-on-go/no_sleep_1.png","slug":"no_sleep_1.png","post":"cj97qbofr000ansumrg2kwoig","modified":0,"renderable":0},{"_id":"source/_posts/the-concurrency-on-go/test4.png","slug":"test4.png","post":"cj97qbofr000ansumrg2kwoig","modified":0,"renderable":0},{"_id":"source/_posts/the-concurrency-on-go/test5.png","slug":"test5.png","post":"cj97qbofr000ansumrg2kwoig","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cj97qboed0000nsumzcyo91qf","category_id":"cj97qboen0002nsuminapah4s","_id":"cj97qboen0008nsumvh65vu9r"},{"post_id":"cj97qboed0000nsumzcyo91qf","category_id":"cj97qboen0005nsum2alm8gp8","_id":"cj97qboex0009nsumsmy8crtb"},{"post_id":"cj97qbofr000ansumrg2kwoig","category_id":"cj97qbofr000cnsumeq3ltpxp","_id":"cj97qbofr000fnsum01rvsdh4"}],"PostTag":[{"post_id":"cj97qboed0000nsumzcyo91qf","tag_id":"cj97qboen0003nsum2hysstit","_id":"cj97qboen0006nsumz4bqv13b"},{"post_id":"cj97qboed0000nsumzcyo91qf","tag_id":"cj97qboen0004nsum152w86lk","_id":"cj97qboen0007nsumzcbdktqb"},{"post_id":"cj97qbofr000ansumrg2kwoig","tag_id":"cj97qbofr000dnsumxtsqaxe6","_id":"cj97qbofr000ensumgqvs4y4m"}],"Tag":[{"name":"raft","_id":"cj97qboen0003nsum2hysstit"},{"name":"golang","_id":"cj97qboen0004nsum152w86lk"},{"name":"concurrency","_id":"cj97qbofr000dnsumxtsqaxe6"}]}}