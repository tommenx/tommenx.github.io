{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1508382036503},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1508382034571},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1508382037139},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1508382036543},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1508382036411},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1508382034615},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1508382036403},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1508382036555},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1508382034567},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1508382036507},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1508382036539},{"_id":"themes/next/README.md","hash":"aba736f1b934f2b169035ccf94d2771a270ec21d","modified":1508382036379},{"_id":"themes/next/_config.yml","hash":"879b8d8752ae02b048346398b1ff88a826dc1260","modified":1508678088539},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1508382036399},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1508382036391},{"_id":"themes/next/package.json","hash":"2174d61cbc9fa276a82b02649426842f088825ab","modified":1508382037259},{"_id":"source/_posts/Raft-PartA.md","hash":"c6e1d6f8e0aa782757789a1149ffbe82e1985439","modified":1508679636931},{"_id":"source/tags/index.md","hash":"d6bf90d150b50a164a5de6d19997ebeffb7bde96","modified":1508394505310},{"_id":"source/categories/index.md","hash":"399bca60cc7620a134714cb7fe7c019598ae4ef8","modified":1508394539526},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1508382034591},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1508382034603},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1508382034599},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1508382034583},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1508382037151},{"_id":"themes/next/languages/en.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1508382037215},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1508382037235},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1508382037243},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1508382037163},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1508382037203},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1508382037179},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1508382037227},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1508382037183},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1508382037247},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1508382037171},{"_id":"themes/next/languages/zh-Hans.yml","hash":"b342544b715da19d982349017bd56c5aaca11f71","modified":1508382037147},{"_id":"themes/next/languages/zh-hk.yml","hash":"2ef272bcb1f325480f59f1e2ab95584de3c6b8da","modified":1508382037195},{"_id":"themes/next/languages/zh-tw.yml","hash":"c53941a2eaac8e3a2f8dacc73ed555d3c6c5bd59","modified":1508382037211},{"_id":"themes/next/layout/_layout.swig","hash":"72a1a2612f7c14cc9af51c55c8dfac39d6c0a2bf","modified":1508382036651},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1508382037067},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1508382036795},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1508382036791},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1508382036799},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1508382036567},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1508382037083},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1508382037079},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1508382036419},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1508382036427},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1508382036527},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1508382036519},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1508382036515},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508382035543},{"_id":"source/_posts/Raft-PartA/election.png","hash":"68402d39dd3eca68e3463400a32e51e081ffb8a8","modified":1508669765128},{"_id":"source/_posts/Raft-PartA/raft.png","hash":"a8d000abdb9a75caec7585ad6853b68aa779a89a","modified":1508669769964},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1508382036635},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1508382036639},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1508382037111},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1508382037131},{"_id":"themes/next/layout/_macro/post.swig","hash":"767e1d5503ecce85f577c8fb673a3503b65484ce","modified":1508382037099},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1508382037119},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1508382037087},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1508382037115},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0fbeb56e9c4d5193c6a181d45c4b1b7a44a0e027","modified":1508382036663},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1508382036767},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1508382036731},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1508382036779},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1508382036671},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1508382036667},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1508382036723},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1508382036603},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1508382036627},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1508382036619},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1508382036955},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1508382036887},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1508382036875},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1508382036927},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1508382037055},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1508382036939},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1508382036483},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1508382036435},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1508382036491},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1508382036451},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1508382036495},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1508382036459},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1508382036467},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1508382036439},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1508382036471},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1508382036327},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1508382034663},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1508382034623},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1508382034687},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1508382034759},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1508382034699},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1508382034667},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1508382034647},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1508382034727},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1508382034731},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1508382034743},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1508382034655},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1508382034751},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508382034711},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1508382034631},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508382034679},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1508382034635},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1508382034695},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1508382034719},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508382036599},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508382036587},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508382036339},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508382036347},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508382036343},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508382036299},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508382036287},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1508382036715},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1508382036703},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1508382036683},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1508382036695},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1508382036699},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1508382036747},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1508382036759},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1508382036763},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1508382036735},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1508382036607},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1508382036575},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1508382036571},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1508382037035},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1508382037015},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1508382036987},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1508382037003},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1508382036959},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1508382037019},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1508382037047},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1508382037023},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1508382036991},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1508382036971},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1508382036983},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1508382037051},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1508382036823},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1508382036811},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1508382036863},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1508382036843},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"576e716893153a855eaf6d136fad7cb6d4065e09","modified":1508382036859},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1508382036855},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1508382036831},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1508382036827},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1508382036919},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1508382036923},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1508382036907},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1508382036947},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1508382035555},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1508382036371},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1508382036367},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1508382036359},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1508382036319},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1508382036283},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"ec79c23f1956bade7bcaa7189d97b7463b8f9f75","modified":1508382036311},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4df88b33f4bd31b872b5c842405267256024f75a","modified":1508382036307},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1508382034775},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1508382034823},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1508382034791},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1508382034831},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1508382034855},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1508382034795},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1508382034839},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1508382034787},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1508382034763},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1508382034851},{"_id":"themes/next/source/js/src/utils.js","hash":"6b0eeeb9dda4a7c94c1c4f6fafd2c801da6e8f96","modified":1508382034819},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1508382035535},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1508382035487},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1508382034863},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1508382035467},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1508382035475},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1508382034895},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1508382034887},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1508382034871},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1508382034883},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1508382035003},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1508382035011},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1508382035019},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1508382034987},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1508382034991},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1508382034971},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1508382035239},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1508382035235},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1508382035211},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1508382035227},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1508382035219},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1508382035251},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1508382035187},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1508382035195},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1508382035123},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1508382035155},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1508382035203},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1508382035103},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1508382035167},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1508382035111},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1508382035171},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1508382035115},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1508382035147},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1508382035179},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1508382035135},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1508382035143},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1508382035499},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1508382035495},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1508382035519},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1508382034955},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1508382034939},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1508382034947},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1508382034927},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1508382034959},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1508382034979},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1508382036895},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1508382036891},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1508382035971},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1508382035787},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1508382035963},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1508382036215},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1508382035871},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1508382036051},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1508382035799},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1508382035767},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1508382035743},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1508382035775},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1508382035755},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1508382035751},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1508382035783},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1508382035735},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1508382035607},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1508382035703},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1508382035723},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1508382035679},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1508382035671},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"5e6c9f8a730b78c7ce5572d327c2a7311c3609b9","modified":1508382035711},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1508382035695},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1508382035719},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1508382035631},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1508382035623},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1508382035615},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1508382035651},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1508382035655},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1508382035575},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1508382035587},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1508382035567},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1508382035591},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f3991aeca25d0814f5cea800b58f25d0222cd246","modified":1508382035559},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1508382035599},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1508382034807},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1508382035327},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1508382035335},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1508382035339},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1508382035431},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1508382035423},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1508382035455},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1508382035403},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1508382035411},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1508382035435},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1508382035347},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1508382035443},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1508382035463},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1508382034903},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1508382034915},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1508382035083},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1508382035091},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1508382035079},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1508382035259},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1508382035267},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1508382035275},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508382035023},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508382035059},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1508382034919},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1508382035875},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1508382035851},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1508382035839},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1508382035847},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1508382035863},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1508382035831},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1508382035815},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1508382035807},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1508382035819},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1508382036187},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1508382036175},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1508382036183},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1508382036195},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1508382036203},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"f958da71d211f592ca64d0cf1328d801fffd3179","modified":1508382036143},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1508382036071},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1508382036067},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1508382036111},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1508382036159},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1508382036151},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1508382036123},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1508382036127},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1508382036095},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1508382036083},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1508382036135},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1508382036163},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1508382036059},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1508382036091},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fb0d3ae0f0c26393199de8f81fb3658d86fbbfaf","modified":1508382036103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1508382035923},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1508382035903},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1508382035907},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1508382035955},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1508382035915},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1508382035895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1508382035935},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1508382035939},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1508382035947},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1508382035883},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1508382036035},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1508382035979},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1508382035995},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1508382036039},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1508382036003},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1508382036011},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1508382036019},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1508382036027},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1508382035987},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1508382036259},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1508382036235},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1508382036247},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1508382036267},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1508382036219},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1508382036275},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1508382036227},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1508382036251},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1508382035663},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1508382035687},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1508382035639},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1508382035283},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1508382035307},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1508382035295},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1508382035315},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1508382035303},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1508382035367},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1508382035359},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1508382035379},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1508382035399},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1508382035391},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1508382035371},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508382035035},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508382035043},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508382035051},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1508382035527},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1508382035507},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1508382035067}],"Category":[{"name":"分布式系统","_id":"cj92t4mnv0003u0d7gfi6sz0w"},{"name":"MIT 6.824","parent":"cj92t4mnv0003u0d7gfi6sz0w","_id":"cj92t4mo10006u0d7031pd0cu"}],"Data":[],"Page":[{"title":"categories","date":"2017-10-19T06:16:14.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-10-19 14:16:14\ntype: \"categories\"\n---\n","updated":"2017-10-19T06:28:59.526Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj92t4mnr0001u0d7711yzxbd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2017-10-19T06:15:50.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ndate: 2017-10-19 14:15:50\n---\n","updated":"2017-10-19T06:28:25.310Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj92t4mnu0002u0d7w8dk2gi9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Raft-PartA","date":"2017-10-22T10:39:29.000Z","_content":"本次的实验为MIT6.824 Distribute System 中 Lab2 raft part A,通过课程所给的代码的骨架，要求实验raft中选举部分的功能。由于我的水平较渣，觉得课程的难度较大，与其说是实验比如说是对Github上的大神的代码进行理解，并结合论文进行思考。希望有朝一日能够自己做出一个实验啊！\n\n> Implement leader election and heartbeats (`AppendEntries` RPCs with no log entries). The goal for Part 2A is for a single leader to be elected, for the leader to remain the leader if there are no failures, and for a new leader to take over if the old leader fails or if packets to/from the old leader are lost. Run `go test -run 2A` to test your 2A code.\n\nPart A 部分要求实现raft的选举功能，其中raft中的每一个server都会维护自己的一个raft的结构体，其中只有两种RPC：`AppendEntries RPC` 和 `RequestVote RPC`。其中当`AppendEntres RPC`中的log为空时用作`HeartBeat`维护server 和 follower之间的通信，而`RequestVote RPC`则用作当follower转变成candidate时，向其他的server请求投票时的通信。整个选举的过程可以概括为下面的这张图，而其中又有许多的细节需要结合论文中的Figure 2中的每一个条件实现；\n\n{% asset_image election.png election%}\n## 可以概括为如下几个步骤\n1. 系统初始化时，所有的server都是FLLOWER状态,并维护一个计时器，计时结束会成为CANDIDATE并开始选举；FOLLOWER每当收到一次`Herat Beat`或`RequestVote RPC`时重置计时器；\n2. CANDIDATE在选举的时候依旧会维护一个计时器向所有的SERVER发送`Request Vote`，在结束时仍未选举完，重新开始选举。当CANDIDATE获得大部分的投票后变为LEADER;在选举的过程中若收到来自更新的term的`AppendEntries RPC`或者自己的term小于其他server的term时，转变为FOLLOWER；\n3. LEADER开始广播`Heart Beat`包，广播自己成为LEADER的事实，并且维护和FOLLOWER之间的通信。当发现FOLLOWER的reply中有更高的term时转变为FOLLOWER；\n\n## 代码解析\n\n\n### 定义一些常量\n``` go\nconst (\n\tFOLLOWER = iota\n\tCANDIDATE\n\tLEADER\n\n\tHEARTBEAT_INTERVAL    = 100\n\tMIN_ELECTION_INTERVAL = 400\n\tMAX_ELECTION_INTERVAL = 500\n)\n```\n### 创建必要的结构体\nraft相当于server中的state machine\n``` go\ntype Raft struct {\n\tmu        sync.Mutex          // Lock to protect shared access to this peer's state\n\tpeers     []*labrpc.ClientEnd // RPC end points of all peers\n\tpersister *Persister          // Object to hold this peer's persisted state\n\tme        int                 // this peer's index into peers[]\n\n\t// Your data here (2A, 2B, 2C).\n\t// Look at the paper's Figure 2 for a description of what\n\t// state a Raft server must maintain.\n\n\tvotedFor     int   //投票给某个CANDIDATE id\n\tvoteAcquired int   //收到的票数总数，用于判断能否成为LEADER\n\tstate        int32 //server当前的状态\n\tcurrentTerm  int32 //server当前的term\n\n\tvoteCh   chan struct{} //由于是并行发送用于指示server收到VoteRequest后的操作\n\tappendCh chan struct{} //收到Append Entries后的操作\n\n\telectionTimer *time.Timer //用于FOLLOWER和CANDIDATE的操作\n}\n```\n发送`RequestVote RPC`包中的内容\n```go\ntype RequestVoteArgs struct {\n\tTerm        int32\n\tCandidateId int\n}\n```\nserver对于`RequestVote RPC`包的回复\n```go\ntype RequestVoteReply struct {\n\t// Your data here (2A).\n\tTerm        int32\n\tVoteGranted bool\n}\n```\n发送`AppendEntries RPC`包中的内容\n```go\n//此处只涉及选举，不考虑replication及log中的内容\ntype AppendEntriesArgs struct {\n\tTerm     int32\n\tLeaderID int\n}\n```\n接收`AppendEntries RPC`包，并回复\n同样这里不考虑CANDIDATE中的log是否是最新的，只要有合适的`VoteReuest PRC`就投票\n```go\ntype AppendEntriesReply struct {\n\tTerm    int32\n\tSuccess bool\n}\n```\n###一些重要的工具函数\n\n\n```go\nfunc (rf *Raft) getTerm() int32 {\n\treturn atomic.LoadInt32(&rf.currentTerm)\n}\n\nfunc (rf *Raft) incrementTerm() int32 {\n\treturn atomic.AddInt32(&rf.currentTerm, 1)\n}\n\nfunc (rf *Raft) isState(state int32) bool {\n\treturn atomic.LoadInt32(&rf.state) == state\n}\n\nfunc (rf *Raft) GetState() (int, bool) {\n\n\tvar term int\n\tvar isleader bool\n\t// Your code here (2A).\n\tterm = int(rf.getTerm())\n\tisleader = rf.isState(LEADER)\n\treturn term, isleader\n}\n\nfunc randElectionDuration() time.Duration {\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\treturn time.Millisecond * time.Duration(\n    \t\t\tr.Int63n(MAX_ELECTION_INTERVAL-MIN_ELECTION_INTERVAL)+MIN_ELECTION_INTERVAL\n       \t)\n}\n```\n\n### CANDIDATE发送`RequestVote RPC`包\n用于CANDIDATE发送包和对reply的处理\n\n- 遍历每一个server，若投票了则voteGranted自增1\n- 若发现reply中的term大于自身当前的term，则转变为FOLLOWER\n\n```go\nfunc (rf *Raft) broadcastVoteReq() {\n\targs := RequestVoteArgs{Term: atomic.LoadInt32(&rf.currentTerm), CandidateId: rf.me}\n\tfor i, _ := range rf.peers {\n\t\tif i == rf.me {\n\t\t\tcontinue\n\t\t}\n\t\t// is it is candidate then send vote req\n\t\tgo func(server int) {\n\t\t\tvar reply RequestVoteReply\n\t\t\tif rf.isState(CANDIDATE) && rf.sendRequestVote(server, &args, &reply) {\n\t\t\t\trf.mu.Lock()\n\t\t\t\tdefer rf.mu.Unlock()\n\t\t\t\t//deal with the reply\n\t\t\t\tif reply.VoteGranted {\n\t\t\t\t\trf.voteAcquired += 1\n\t\t\t\t} else {\n\t\t\t\t\tif reply.Term > rf.currentTerm {\n\t\t\t\t\t\trf.currentTerm = reply.Term\n\t\t\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Server %d send vote req failed.\\n\", rf.me)\n\t\t\t}\n\t\t}(i)\n\t}\n}\n```\n\n\n### server对`RequestVote RPC`的处理\n依据论文Figure 2中的要求，有以下几个处理的要点：\n- 判断自身的term是否大于CANDIDATE的term，若是则拒绝投票，并更新reply中的term\n- 若当前的term小于CANDIDATE发送的term，更新自身的term，并将自己的状态变为follower（当前状态为CANDIDATE或LEADER）\n- 当两者的term相等时，必须是初始状态，否则拒绝投票（FOLLOWER转变为CANDIDATE时候term自增1，因此必须大于其他server）\n- 投票成功后，利用信道通知主循环（整个操作是并行的）\n\n\n```go\nfunc (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {\n\t// Your code here (2A, 2B).\n\trf.mu.Lock()\n\tdefer rf.mu.Unlock()\n\tif args.Term < rf.currentTerm {\n\t\treply.VoteGranted = false\n\t\treply.Term = rf.currentTerm\n\t} else if args.Term > rf.currentTerm {\n\t\trf.currentTerm = args.Term\n\t\trf.updateStateTo(FOLLOWER)\n\t\trf.votedFor = args.CandidateId\n\t\treply.VoteGranted = true\n\t} else {\n\t\tif rf.votedFor == -1 {\n\t\t\trf.votedFor = args.CandidateId\n\t\t\treply.VoteGranted = true\n\t\t} else {\n\t\t\treply.VoteGranted = false\n\t\t}\n\t}\n\tif reply.VoteGranted == true {\n\t\tgo func() { rf.voteCh <- struct{}{} }()\n\t}\n}\n```\n\n\n### LEADER广播`AppendEntries RPC`，和对reply的处理\n\n由于这里只是单纯的选举所以处理的逻辑很简单，只处理失败的回复：\n\n- 如果reply中的term大于当前LEADER中的term，则LEADER将自己的状态变成FOLLOWER\n\n\n```go\nfunc (rf *Raft) broadcastAppendEnrties() {\n\targs := AppendEntriesArgs{Term: atomic.LoadInt32(&rf.currentTerm), LeaderID: rf.me}\n\tfor i, _ := range rf.peers {\n\t\tif i == rf.me {\n\t\t\tcontinue\n\t\t}\n\t\tgo func(server int) {\n\t\t\tvar reply AppendEntriesReply\n\t\t\tif rf.isState(LEADER) && rf.sendAppendEntries(server, &args, &reply) {\n\t\t\t\trf.mu.Lock()\n\t\t\t\tdefer rf.mu.Unlock()\n\t\t\t\tif reply.Success {\n\n\t\t\t\t} else {\n\t\t\t\t\tif reply.Term > rf.currentTerm {\n\t\t\t\t\t\trf.currentTerm = reply.Term\n\t\t\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}\n```\n\n### server对`AppendEntries RPC`的处理\n同样，raft中的term可以作为判断是不是最新的依据，根据Figure 2，server在处理`AppendEntries RPC`，有如下注意点：\n- 如果`args.Term < rf.currentTerm`，`reply.Term = rf.currentTerm`;\n- 如果`args.Term > rf.currentTerm`，更新当前的term并且将状态改变为FOLLOWER（针对当前状态为CANDIDATE的server）\n\n\n```go\nfunc (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {\n\trf.mu.Lock()\n\tdefer rf.mu.Unlock()\n\t//deal with the msg and reply\n\tif args.Term < rf.currentTerm {\n\t\treply.Success = false\n\t\treply.Term = rf.currentTerm\n\t} else if args.Term > rf.currentTerm {\n\t\trf.currentTerm = args.Term\n\t\trf.updateStateTo(FOLLOWER)\n\t\treply.Success = true\n\t} else {\n\t\treply.Success = true\n\t}\n\tgo func() {\n\t\trf.appendCh <- struct{}{}\n\t}()\n}\n```\n\n\n### 状态转变的函数\n\n需要注意的是当转变成FOLLOWER时，要将自己的`VoteFor`初始化为-1，当转变成CANDIDATE时候要注意开始选举LEADER\n```go\nfunc (rf *Raft) updateStateTo(state int32) {\n\tif rf.isState(state) {\n\t\treturn\n\t}\n\tstateDesc := []string{\"FOLLOWER\", \"CANDIDATE\", \"LEADER\"}\n\tpreState := rf.state\n\tswitch state {\n\tcase FOLLOWER:\n\t\trf.state = FOLLOWER\n\t\trf.votedFor = -1\n\tcase CANDIDATE:\n\t\trf.state = CANDIDATE\n\t\trf.startElection()\n\tcase LEADER:\n\t\trf.state = LEADER\n\tdefault:\n\t\tfmt.Printf(\"Warning: invalid state %d, do nothing.\\n\", state)\n\t}\n\tfmt.Printf(\"In term %d: Server %d transfer from %s to %s\\n\",\n\t\trf.currentTerm, rf.me, stateDesc[preState], stateDesc[rf.state])\n\n}\n```\n### 开始新一轮选举的函数\n按照论文的要求在开始选举新的LEADER的时候要重置计时器，因为CANDIDATE会为自己投票所以票数初始置为1\n```go\nfunc (rf *Raft) startElection() {\n\trf.incrementTerm()  //first increase current term\n\trf.votedFor = rf.me //vote for self\n\trf.voteAcquired = 1 //acquire self's vote\n\trf.electionTimer.Reset(randElectionDuration())\n\trf.broadcastVoteReq()\n}\n```\n\n#### 整个状态的循环实现\n不断的循环，并根据当前server的角色进行不同的操作\n\n\n#### FOLLOWER\n\n\n- 当收到CANDIDATE发送的`VoteRequest RPC`时，重置计时器\n- 当收到LEADER发送的`AppendEntries RPC`时，重置计时器\n- 当计时器结束时，说明当前的server断绝联系，于是FOLLOWER转变为CANDIDATE开始新一轮的选举\n\n\n#### CANDIDATE\n- 在收到`AppendEntries RPC`时，说明LEADER依旧存在，停止选举转变为FOLLOWER\n- 当计时器结束时，重新开始选举\n- 当投票数大于总数的一半时，当选LEADER\n\n\n#### LEADER\n- 间隔一段时间发送`HeartBeat`心跳包维持LEADER和其他的server的通信\n\n\n```go\nfunc (rf *Raft) startLoop() {\n\trf.electionTimer = time.NewTimer(randElectionDuration())\n\tfor {\n\t\tswitch atomic.LoadInt32(&rf.state) {\n\t\tcase FOLLOWER:\n\t\t\tselect {\n\t\t\tcase <-rf.voteCh:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\tcase <-rf.appendCh:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\tcase <-rf.electionTimer.C:\n\t\t\t\t//time out\n\t\t\t\trf.mu.Lock()\n\t\t\t\trf.updateStateTo(CANDIDATE)\n\t\t\t\trf.mu.Unlock()\n\t\t\t}\n\t\tcase CANDIDATE:\n\t\t\trf.mu.Lock()\n\t\t\tselect {\n\t\t\tcase <-rf.appendCh:\n\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\tcase <-rf.electionTimer.C:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\t\trf.startElection()\n\t\t\tdefault:\n\t\t\t\tif rf.voteAcquired > len(rf.peers)/2 {\n\t\t\t\t\trf.updateStateTo(LEADER)\n\t\t\t\t}\n\t\t\t}\n\t\t\trf.mu.Unlock()\n\t\tcase LEADER:\n\t\t\trf.broadcastAppendEnrties()\n\t\t\ttime.Sleep(HEARTBEAT_INTERVAL * time.Millisecond)\n\t\t}\n\n\t}\n```\n\n### 初始化并开始循环\n```go\nfunc Make(peers []*labrpc.ClientEnd, me int,\n\tpersister *Persister, applyCh chan ApplyMsg) *Raft {\n\trf := &Raft{}\n\trf.peers = peers\n\trf.persister = persister\n\trf.me = me\n\n\t// Your initialization code here (2A, 2B, 2C).\n\trf.state = FOLLOWER\n\trf.votedFor = -1\n\trf.voteCh = make(chan struct{})\n\trf.appendCh = make(chan struct{})\n\n\t// initialize from state persisted before a crash\n\trf.readPersist(persister.ReadRaftState())\n\n\tgo rf.startLoop()\n\n\treturn rf\n}\n```\n\n## 总结\n\n---\n第一次将论文中的算法“实现”，虽然是参考了大神的代码，还是觉得收获满满。\n首先，纠正了我看论文一目十行的方法，以前总觉得论文这东西太虚，只是所谓的想法，经过这次无数遍的研读之后，发现论文中的每一句话对于整个算法的执行都有至关重要的作用。因此，以后在看论文的时候，需要逐句理解，最好能够抽象出整个模型，并且思考论文这么做对于整个系统的实现有什么好处\n其次，自己的代码的能力实在是弱的不行，我能看得懂这些代码，并能在脑中把每一个函数链接起来，但是距离完全靠自己的能力去实现一个这样的系统还有相当长的路要走。\n希望能坚持将自己所看的论文、方法都能用自己的话去说出来，加深下理解。\n\n\n\n\n\n\n\n","source":"_posts/Raft-PartA.md","raw":"---\ntitle: Raft-PartA\ndate: 2017-10-22 18:39:29\ncategories:\n- 分布式系统\n- MIT 6.824\ntags:\n- raft\n- golang\n---\n本次的实验为MIT6.824 Distribute System 中 Lab2 raft part A,通过课程所给的代码的骨架，要求实验raft中选举部分的功能。由于我的水平较渣，觉得课程的难度较大，与其说是实验比如说是对Github上的大神的代码进行理解，并结合论文进行思考。希望有朝一日能够自己做出一个实验啊！\n\n> Implement leader election and heartbeats (`AppendEntries` RPCs with no log entries). The goal for Part 2A is for a single leader to be elected, for the leader to remain the leader if there are no failures, and for a new leader to take over if the old leader fails or if packets to/from the old leader are lost. Run `go test -run 2A` to test your 2A code.\n\nPart A 部分要求实现raft的选举功能，其中raft中的每一个server都会维护自己的一个raft的结构体，其中只有两种RPC：`AppendEntries RPC` 和 `RequestVote RPC`。其中当`AppendEntres RPC`中的log为空时用作`HeartBeat`维护server 和 follower之间的通信，而`RequestVote RPC`则用作当follower转变成candidate时，向其他的server请求投票时的通信。整个选举的过程可以概括为下面的这张图，而其中又有许多的细节需要结合论文中的Figure 2中的每一个条件实现；\n\n{% asset_image election.png election%}\n## 可以概括为如下几个步骤\n1. 系统初始化时，所有的server都是FLLOWER状态,并维护一个计时器，计时结束会成为CANDIDATE并开始选举；FOLLOWER每当收到一次`Herat Beat`或`RequestVote RPC`时重置计时器；\n2. CANDIDATE在选举的时候依旧会维护一个计时器向所有的SERVER发送`Request Vote`，在结束时仍未选举完，重新开始选举。当CANDIDATE获得大部分的投票后变为LEADER;在选举的过程中若收到来自更新的term的`AppendEntries RPC`或者自己的term小于其他server的term时，转变为FOLLOWER；\n3. LEADER开始广播`Heart Beat`包，广播自己成为LEADER的事实，并且维护和FOLLOWER之间的通信。当发现FOLLOWER的reply中有更高的term时转变为FOLLOWER；\n\n## 代码解析\n\n\n### 定义一些常量\n``` go\nconst (\n\tFOLLOWER = iota\n\tCANDIDATE\n\tLEADER\n\n\tHEARTBEAT_INTERVAL    = 100\n\tMIN_ELECTION_INTERVAL = 400\n\tMAX_ELECTION_INTERVAL = 500\n)\n```\n### 创建必要的结构体\nraft相当于server中的state machine\n``` go\ntype Raft struct {\n\tmu        sync.Mutex          // Lock to protect shared access to this peer's state\n\tpeers     []*labrpc.ClientEnd // RPC end points of all peers\n\tpersister *Persister          // Object to hold this peer's persisted state\n\tme        int                 // this peer's index into peers[]\n\n\t// Your data here (2A, 2B, 2C).\n\t// Look at the paper's Figure 2 for a description of what\n\t// state a Raft server must maintain.\n\n\tvotedFor     int   //投票给某个CANDIDATE id\n\tvoteAcquired int   //收到的票数总数，用于判断能否成为LEADER\n\tstate        int32 //server当前的状态\n\tcurrentTerm  int32 //server当前的term\n\n\tvoteCh   chan struct{} //由于是并行发送用于指示server收到VoteRequest后的操作\n\tappendCh chan struct{} //收到Append Entries后的操作\n\n\telectionTimer *time.Timer //用于FOLLOWER和CANDIDATE的操作\n}\n```\n发送`RequestVote RPC`包中的内容\n```go\ntype RequestVoteArgs struct {\n\tTerm        int32\n\tCandidateId int\n}\n```\nserver对于`RequestVote RPC`包的回复\n```go\ntype RequestVoteReply struct {\n\t// Your data here (2A).\n\tTerm        int32\n\tVoteGranted bool\n}\n```\n发送`AppendEntries RPC`包中的内容\n```go\n//此处只涉及选举，不考虑replication及log中的内容\ntype AppendEntriesArgs struct {\n\tTerm     int32\n\tLeaderID int\n}\n```\n接收`AppendEntries RPC`包，并回复\n同样这里不考虑CANDIDATE中的log是否是最新的，只要有合适的`VoteReuest PRC`就投票\n```go\ntype AppendEntriesReply struct {\n\tTerm    int32\n\tSuccess bool\n}\n```\n###一些重要的工具函数\n\n\n```go\nfunc (rf *Raft) getTerm() int32 {\n\treturn atomic.LoadInt32(&rf.currentTerm)\n}\n\nfunc (rf *Raft) incrementTerm() int32 {\n\treturn atomic.AddInt32(&rf.currentTerm, 1)\n}\n\nfunc (rf *Raft) isState(state int32) bool {\n\treturn atomic.LoadInt32(&rf.state) == state\n}\n\nfunc (rf *Raft) GetState() (int, bool) {\n\n\tvar term int\n\tvar isleader bool\n\t// Your code here (2A).\n\tterm = int(rf.getTerm())\n\tisleader = rf.isState(LEADER)\n\treturn term, isleader\n}\n\nfunc randElectionDuration() time.Duration {\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\treturn time.Millisecond * time.Duration(\n    \t\t\tr.Int63n(MAX_ELECTION_INTERVAL-MIN_ELECTION_INTERVAL)+MIN_ELECTION_INTERVAL\n       \t)\n}\n```\n\n### CANDIDATE发送`RequestVote RPC`包\n用于CANDIDATE发送包和对reply的处理\n\n- 遍历每一个server，若投票了则voteGranted自增1\n- 若发现reply中的term大于自身当前的term，则转变为FOLLOWER\n\n```go\nfunc (rf *Raft) broadcastVoteReq() {\n\targs := RequestVoteArgs{Term: atomic.LoadInt32(&rf.currentTerm), CandidateId: rf.me}\n\tfor i, _ := range rf.peers {\n\t\tif i == rf.me {\n\t\t\tcontinue\n\t\t}\n\t\t// is it is candidate then send vote req\n\t\tgo func(server int) {\n\t\t\tvar reply RequestVoteReply\n\t\t\tif rf.isState(CANDIDATE) && rf.sendRequestVote(server, &args, &reply) {\n\t\t\t\trf.mu.Lock()\n\t\t\t\tdefer rf.mu.Unlock()\n\t\t\t\t//deal with the reply\n\t\t\t\tif reply.VoteGranted {\n\t\t\t\t\trf.voteAcquired += 1\n\t\t\t\t} else {\n\t\t\t\t\tif reply.Term > rf.currentTerm {\n\t\t\t\t\t\trf.currentTerm = reply.Term\n\t\t\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Server %d send vote req failed.\\n\", rf.me)\n\t\t\t}\n\t\t}(i)\n\t}\n}\n```\n\n\n### server对`RequestVote RPC`的处理\n依据论文Figure 2中的要求，有以下几个处理的要点：\n- 判断自身的term是否大于CANDIDATE的term，若是则拒绝投票，并更新reply中的term\n- 若当前的term小于CANDIDATE发送的term，更新自身的term，并将自己的状态变为follower（当前状态为CANDIDATE或LEADER）\n- 当两者的term相等时，必须是初始状态，否则拒绝投票（FOLLOWER转变为CANDIDATE时候term自增1，因此必须大于其他server）\n- 投票成功后，利用信道通知主循环（整个操作是并行的）\n\n\n```go\nfunc (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {\n\t// Your code here (2A, 2B).\n\trf.mu.Lock()\n\tdefer rf.mu.Unlock()\n\tif args.Term < rf.currentTerm {\n\t\treply.VoteGranted = false\n\t\treply.Term = rf.currentTerm\n\t} else if args.Term > rf.currentTerm {\n\t\trf.currentTerm = args.Term\n\t\trf.updateStateTo(FOLLOWER)\n\t\trf.votedFor = args.CandidateId\n\t\treply.VoteGranted = true\n\t} else {\n\t\tif rf.votedFor == -1 {\n\t\t\trf.votedFor = args.CandidateId\n\t\t\treply.VoteGranted = true\n\t\t} else {\n\t\t\treply.VoteGranted = false\n\t\t}\n\t}\n\tif reply.VoteGranted == true {\n\t\tgo func() { rf.voteCh <- struct{}{} }()\n\t}\n}\n```\n\n\n### LEADER广播`AppendEntries RPC`，和对reply的处理\n\n由于这里只是单纯的选举所以处理的逻辑很简单，只处理失败的回复：\n\n- 如果reply中的term大于当前LEADER中的term，则LEADER将自己的状态变成FOLLOWER\n\n\n```go\nfunc (rf *Raft) broadcastAppendEnrties() {\n\targs := AppendEntriesArgs{Term: atomic.LoadInt32(&rf.currentTerm), LeaderID: rf.me}\n\tfor i, _ := range rf.peers {\n\t\tif i == rf.me {\n\t\t\tcontinue\n\t\t}\n\t\tgo func(server int) {\n\t\t\tvar reply AppendEntriesReply\n\t\t\tif rf.isState(LEADER) && rf.sendAppendEntries(server, &args, &reply) {\n\t\t\t\trf.mu.Lock()\n\t\t\t\tdefer rf.mu.Unlock()\n\t\t\t\tif reply.Success {\n\n\t\t\t\t} else {\n\t\t\t\t\tif reply.Term > rf.currentTerm {\n\t\t\t\t\t\trf.currentTerm = reply.Term\n\t\t\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}\n```\n\n### server对`AppendEntries RPC`的处理\n同样，raft中的term可以作为判断是不是最新的依据，根据Figure 2，server在处理`AppendEntries RPC`，有如下注意点：\n- 如果`args.Term < rf.currentTerm`，`reply.Term = rf.currentTerm`;\n- 如果`args.Term > rf.currentTerm`，更新当前的term并且将状态改变为FOLLOWER（针对当前状态为CANDIDATE的server）\n\n\n```go\nfunc (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {\n\trf.mu.Lock()\n\tdefer rf.mu.Unlock()\n\t//deal with the msg and reply\n\tif args.Term < rf.currentTerm {\n\t\treply.Success = false\n\t\treply.Term = rf.currentTerm\n\t} else if args.Term > rf.currentTerm {\n\t\trf.currentTerm = args.Term\n\t\trf.updateStateTo(FOLLOWER)\n\t\treply.Success = true\n\t} else {\n\t\treply.Success = true\n\t}\n\tgo func() {\n\t\trf.appendCh <- struct{}{}\n\t}()\n}\n```\n\n\n### 状态转变的函数\n\n需要注意的是当转变成FOLLOWER时，要将自己的`VoteFor`初始化为-1，当转变成CANDIDATE时候要注意开始选举LEADER\n```go\nfunc (rf *Raft) updateStateTo(state int32) {\n\tif rf.isState(state) {\n\t\treturn\n\t}\n\tstateDesc := []string{\"FOLLOWER\", \"CANDIDATE\", \"LEADER\"}\n\tpreState := rf.state\n\tswitch state {\n\tcase FOLLOWER:\n\t\trf.state = FOLLOWER\n\t\trf.votedFor = -1\n\tcase CANDIDATE:\n\t\trf.state = CANDIDATE\n\t\trf.startElection()\n\tcase LEADER:\n\t\trf.state = LEADER\n\tdefault:\n\t\tfmt.Printf(\"Warning: invalid state %d, do nothing.\\n\", state)\n\t}\n\tfmt.Printf(\"In term %d: Server %d transfer from %s to %s\\n\",\n\t\trf.currentTerm, rf.me, stateDesc[preState], stateDesc[rf.state])\n\n}\n```\n### 开始新一轮选举的函数\n按照论文的要求在开始选举新的LEADER的时候要重置计时器，因为CANDIDATE会为自己投票所以票数初始置为1\n```go\nfunc (rf *Raft) startElection() {\n\trf.incrementTerm()  //first increase current term\n\trf.votedFor = rf.me //vote for self\n\trf.voteAcquired = 1 //acquire self's vote\n\trf.electionTimer.Reset(randElectionDuration())\n\trf.broadcastVoteReq()\n}\n```\n\n#### 整个状态的循环实现\n不断的循环，并根据当前server的角色进行不同的操作\n\n\n#### FOLLOWER\n\n\n- 当收到CANDIDATE发送的`VoteRequest RPC`时，重置计时器\n- 当收到LEADER发送的`AppendEntries RPC`时，重置计时器\n- 当计时器结束时，说明当前的server断绝联系，于是FOLLOWER转变为CANDIDATE开始新一轮的选举\n\n\n#### CANDIDATE\n- 在收到`AppendEntries RPC`时，说明LEADER依旧存在，停止选举转变为FOLLOWER\n- 当计时器结束时，重新开始选举\n- 当投票数大于总数的一半时，当选LEADER\n\n\n#### LEADER\n- 间隔一段时间发送`HeartBeat`心跳包维持LEADER和其他的server的通信\n\n\n```go\nfunc (rf *Raft) startLoop() {\n\trf.electionTimer = time.NewTimer(randElectionDuration())\n\tfor {\n\t\tswitch atomic.LoadInt32(&rf.state) {\n\t\tcase FOLLOWER:\n\t\t\tselect {\n\t\t\tcase <-rf.voteCh:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\tcase <-rf.appendCh:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\tcase <-rf.electionTimer.C:\n\t\t\t\t//time out\n\t\t\t\trf.mu.Lock()\n\t\t\t\trf.updateStateTo(CANDIDATE)\n\t\t\t\trf.mu.Unlock()\n\t\t\t}\n\t\tcase CANDIDATE:\n\t\t\trf.mu.Lock()\n\t\t\tselect {\n\t\t\tcase <-rf.appendCh:\n\t\t\t\trf.updateStateTo(FOLLOWER)\n\t\t\tcase <-rf.electionTimer.C:\n\t\t\t\trf.electionTimer.Reset(randElectionDuration())\n\t\t\t\trf.startElection()\n\t\t\tdefault:\n\t\t\t\tif rf.voteAcquired > len(rf.peers)/2 {\n\t\t\t\t\trf.updateStateTo(LEADER)\n\t\t\t\t}\n\t\t\t}\n\t\t\trf.mu.Unlock()\n\t\tcase LEADER:\n\t\t\trf.broadcastAppendEnrties()\n\t\t\ttime.Sleep(HEARTBEAT_INTERVAL * time.Millisecond)\n\t\t}\n\n\t}\n```\n\n### 初始化并开始循环\n```go\nfunc Make(peers []*labrpc.ClientEnd, me int,\n\tpersister *Persister, applyCh chan ApplyMsg) *Raft {\n\trf := &Raft{}\n\trf.peers = peers\n\trf.persister = persister\n\trf.me = me\n\n\t// Your initialization code here (2A, 2B, 2C).\n\trf.state = FOLLOWER\n\trf.votedFor = -1\n\trf.voteCh = make(chan struct{})\n\trf.appendCh = make(chan struct{})\n\n\t// initialize from state persisted before a crash\n\trf.readPersist(persister.ReadRaftState())\n\n\tgo rf.startLoop()\n\n\treturn rf\n}\n```\n\n## 总结\n\n---\n第一次将论文中的算法“实现”，虽然是参考了大神的代码，还是觉得收获满满。\n首先，纠正了我看论文一目十行的方法，以前总觉得论文这东西太虚，只是所谓的想法，经过这次无数遍的研读之后，发现论文中的每一句话对于整个算法的执行都有至关重要的作用。因此，以后在看论文的时候，需要逐句理解，最好能够抽象出整个模型，并且思考论文这么做对于整个系统的实现有什么好处\n其次，自己的代码的能力实在是弱的不行，我能看得懂这些代码，并能在脑中把每一个函数链接起来，但是距离完全靠自己的能力去实现一个这样的系统还有相当长的路要走。\n希望能坚持将自己所看的论文、方法都能用自己的话去说出来，加深下理解。\n\n\n\n\n\n\n\n","slug":"Raft-PartA","published":1,"updated":"2017-10-22T13:40:36.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj92t4mnm0000u0d7gf80v1fj","content":"<p>本次的实验为MIT6.824 Distribute System 中 Lab2 raft part A,通过课程所给的代码的骨架，要求实验raft中选举部分的功能。由于我的水平较渣，觉得课程的难度较大，与其说是实验比如说是对Github上的大神的代码进行理解，并结合论文进行思考。希望有朝一日能够自己做出一个实验啊！</p>\n<blockquote>\n<p>Implement leader election and heartbeats (<code>AppendEntries</code> RPCs with no log entries). The goal for Part 2A is for a single leader to be elected, for the leader to remain the leader if there are no failures, and for a new leader to take over if the old leader fails or if packets to/from the old leader are lost. Run <code>go test -run 2A</code> to test your 2A code.</p>\n</blockquote>\n<p>Part A 部分要求实现raft的选举功能，其中raft中的每一个server都会维护自己的一个raft的结构体，其中只有两种RPC：<code>AppendEntries RPC</code> 和 <code>RequestVote RPC</code>。其中当<code>AppendEntres RPC</code>中的log为空时用作<code>HeartBeat</code>维护server 和 follower之间的通信，而<code>RequestVote RPC</code>则用作当follower转变成candidate时，向其他的server请求投票时的通信。整个选举的过程可以概括为下面的这张图，而其中又有许多的细节需要结合论文中的Figure 2中的每一个条件实现；</p>\n<img src=\"/2017/10/22/Raft-PartA/election.png\" alt=\"election\" title=\"election\">\n<h2 id=\"可以概括为如下几个步骤\"><a href=\"#可以概括为如下几个步骤\" class=\"headerlink\" title=\"可以概括为如下几个步骤\"></a>可以概括为如下几个步骤</h2><ol>\n<li>系统初始化时，所有的server都是FLLOWER状态,并维护一个计时器，计时结束会成为CANDIDATE并开始选举；FOLLOWER每当收到一次<code>Herat Beat</code>或<code>RequestVote RPC</code>时重置计时器；</li>\n<li>CANDIDATE在选举的时候依旧会维护一个计时器向所有的SERVER发送<code>Request Vote</code>，在结束时仍未选举完，重新开始选举。当CANDIDATE获得大部分的投票后变为LEADER;在选举的过程中若收到来自更新的term的<code>AppendEntries RPC</code>或者自己的term小于其他server的term时，转变为FOLLOWER；</li>\n<li>LEADER开始广播<code>Heart Beat</code>包，广播自己成为LEADER的事实，并且维护和FOLLOWER之间的通信。当发现FOLLOWER的reply中有更高的term时转变为FOLLOWER；</li>\n</ol>\n<h2 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h2><h3 id=\"定义一些常量\"><a href=\"#定义一些常量\" class=\"headerlink\" title=\"定义一些常量\"></a>定义一些常量</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tFOLLOWER = <span class=\"literal\">iota</span></div><div class=\"line\">\tCANDIDATE</div><div class=\"line\">\tLEADER</div><div class=\"line\"></div><div class=\"line\">\tHEARTBEAT_INTERVAL    = <span class=\"number\">100</span></div><div class=\"line\">\tMIN_ELECTION_INTERVAL = <span class=\"number\">400</span></div><div class=\"line\">\tMAX_ELECTION_INTERVAL = <span class=\"number\">500</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h3 id=\"创建必要的结构体\"><a href=\"#创建必要的结构体\" class=\"headerlink\" title=\"创建必要的结构体\"></a>创建必要的结构体</h3><p>raft相当于server中的state machine<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Raft <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tmu        sync.Mutex          <span class=\"comment\">// Lock to protect shared access to this peer's state</span></div><div class=\"line\">\tpeers     []*labrpc.ClientEnd <span class=\"comment\">// RPC end points of all peers</span></div><div class=\"line\">\tpersister *Persister          <span class=\"comment\">// Object to hold this peer's persisted state</span></div><div class=\"line\">\tme        <span class=\"keyword\">int</span>                 <span class=\"comment\">// this peer's index into peers[]</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Your data here (2A, 2B, 2C).</span></div><div class=\"line\">\t<span class=\"comment\">// Look at the paper's Figure 2 for a description of what</span></div><div class=\"line\">\t<span class=\"comment\">// state a Raft server must maintain.</span></div><div class=\"line\"></div><div class=\"line\">\tvotedFor     <span class=\"keyword\">int</span>   <span class=\"comment\">//投票给某个CANDIDATE id</span></div><div class=\"line\">\tvoteAcquired <span class=\"keyword\">int</span>   <span class=\"comment\">//收到的票数总数，用于判断能否成为LEADER</span></div><div class=\"line\">\tstate        <span class=\"keyword\">int32</span> <span class=\"comment\">//server当前的状态</span></div><div class=\"line\">\tcurrentTerm  <span class=\"keyword\">int32</span> <span class=\"comment\">//server当前的term</span></div><div class=\"line\"></div><div class=\"line\">\tvoteCh   <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">//由于是并行发送用于指示server收到VoteRequest后的操作</span></div><div class=\"line\">\tappendCh <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">//收到Append Entries后的操作</span></div><div class=\"line\"></div><div class=\"line\">\telectionTimer *time.Timer <span class=\"comment\">//用于FOLLOWER和CANDIDATE的操作</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送<code>RequestVote RPC</code>包中的内容<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RequestVoteArgs <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm        <span class=\"keyword\">int32</span></div><div class=\"line\">\tCandidateId <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>server对于<code>RequestVote RPC</code>包的回复<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RequestVoteReply <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Your data here (2A).</span></div><div class=\"line\">\tTerm        <span class=\"keyword\">int32</span></div><div class=\"line\">\tVoteGranted <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送<code>AppendEntries RPC</code>包中的内容<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//此处只涉及选举，不考虑replication及log中的内容</span></div><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesArgs <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm     <span class=\"keyword\">int32</span></div><div class=\"line\">\tLeaderID <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接收<code>AppendEntries RPC</code>包，并回复<br>同样这里不考虑CANDIDATE中的log是否是最新的，只要有合适的<code>VoteReuest PRC</code>就投票<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesReply <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm    <span class=\"keyword\">int32</span></div><div class=\"line\">\tSuccess <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>###一些重要的工具函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">getTerm</span><span class=\"params\">()</span> <span class=\"title\">int32</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.LoadInt32(&amp;rf.currentTerm)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">incrementTerm</span><span class=\"params\">()</span> <span class=\"title\">int32</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.AddInt32(&amp;rf.currentTerm, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">isState</span><span class=\"params\">(state <span class=\"keyword\">int32</span>)</span> <span class=\"title\">bool</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.LoadInt32(&amp;rf.state) == state</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">GetState</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>)</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> term <span class=\"keyword\">int</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> isleader <span class=\"keyword\">bool</span></div><div class=\"line\">\t<span class=\"comment\">// Your code here (2A).</span></div><div class=\"line\">\tterm = <span class=\"keyword\">int</span>(rf.getTerm())</div><div class=\"line\">\tisleader = rf.isState(LEADER)</div><div class=\"line\">\t<span class=\"keyword\">return</span> term, isleader</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">randElectionDuration</span><span class=\"params\">()</span> <span class=\"title\">time</span>.<span class=\"title\">Duration</span></span> &#123;</div><div class=\"line\">\tr := rand.New(rand.NewSource(time.Now().UnixNano()))</div><div class=\"line\">\t<span class=\"keyword\">return</span> time.Millisecond * time.Duration(</div><div class=\"line\">    \t\t\tr.Int63n(MAX_ELECTION_INTERVAL-MIN_ELECTION_INTERVAL)+MIN_ELECTION_INTERVAL</div><div class=\"line\">       \t)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"CANDIDATE发送RequestVote-RPC包\"><a href=\"#CANDIDATE发送RequestVote-RPC包\" class=\"headerlink\" title=\"CANDIDATE发送RequestVote RPC包\"></a>CANDIDATE发送<code>RequestVote RPC</code>包</h3><p>用于CANDIDATE发送包和对reply的处理</p>\n<ul>\n<li>遍历每一个server，若投票了则voteGranted自增1</li>\n<li>若发现reply中的term大于自身当前的term，则转变为FOLLOWER</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">broadcastVoteReq</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\targs := RequestVoteArgs&#123;Term: atomic.LoadInt32(&amp;rf.currentTerm), CandidateId: rf.me&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> rf.peers &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> i == rf.me &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// is it is candidate then send vote req</span></div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(server <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> reply RequestVoteReply</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> rf.isState(CANDIDATE) &amp;&amp; rf.sendRequestVote(server, &amp;args, &amp;reply) &#123;</div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//deal with the reply</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> reply.VoteGranted &#123;</div><div class=\"line\">\t\t\t\t\trf.voteAcquired += <span class=\"number\">1</span></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> reply.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\t\t\t\t\trf.currentTerm = reply.Term</div><div class=\"line\">\t\t\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tfmt.Printf(<span class=\"string\">\"Server %d send vote req failed.\\n\"</span>, rf.me)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"server对RequestVote-RPC的处理\"><a href=\"#server对RequestVote-RPC的处理\" class=\"headerlink\" title=\"server对RequestVote RPC的处理\"></a>server对<code>RequestVote RPC</code>的处理</h3><p>依据论文Figure 2中的要求，有以下几个处理的要点：</p>\n<ul>\n<li>判断自身的term是否大于CANDIDATE的term，若是则拒绝投票，并更新reply中的term</li>\n<li>若当前的term小于CANDIDATE发送的term，更新自身的term，并将自己的状态变为follower（当前状态为CANDIDATE或LEADER）</li>\n<li>当两者的term相等时，必须是初始状态，否则拒绝投票（FOLLOWER转变为CANDIDATE时候term自增1，因此必须大于其他server）</li>\n<li>投票成功后，利用信道通知主循环（整个操作是并行的）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">RequestVote</span><span class=\"params\">(args *RequestVoteArgs, reply *RequestVoteReply)</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Your code here (2A, 2B).</span></div><div class=\"line\">\trf.mu.Lock()</div><div class=\"line\">\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t<span class=\"keyword\">if</span> args.Term &lt; rf.currentTerm &#123;</div><div class=\"line\">\t\treply.VoteGranted = <span class=\"literal\">false</span></div><div class=\"line\">\t\treply.Term = rf.currentTerm</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> args.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\trf.currentTerm = args.Term</div><div class=\"line\">\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\trf.votedFor = args.CandidateId</div><div class=\"line\">\t\treply.VoteGranted = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> rf.votedFor == <span class=\"number\">-1</span> &#123;</div><div class=\"line\">\t\t\trf.votedFor = args.CandidateId</div><div class=\"line\">\t\t\treply.VoteGranted = <span class=\"literal\">true</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\treply.VoteGranted = <span class=\"literal\">false</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> reply.VoteGranted == <span class=\"literal\">true</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; rf.voteCh &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125; &#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"LEADER广播AppendEntries-RPC，和对reply的处理\"><a href=\"#LEADER广播AppendEntries-RPC，和对reply的处理\" class=\"headerlink\" title=\"LEADER广播AppendEntries RPC，和对reply的处理\"></a>LEADER广播<code>AppendEntries RPC</code>，和对reply的处理</h3><p>由于这里只是单纯的选举所以处理的逻辑很简单，只处理失败的回复：</p>\n<ul>\n<li>如果reply中的term大于当前LEADER中的term，则LEADER将自己的状态变成FOLLOWER</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">broadcastAppendEnrties</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\targs := AppendEntriesArgs&#123;Term: atomic.LoadInt32(&amp;rf.currentTerm), LeaderID: rf.me&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> rf.peers &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> i == rf.me &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(server <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> reply AppendEntriesReply</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> rf.isState(LEADER) &amp;&amp; rf.sendAppendEntries(server, &amp;args, &amp;reply) &#123;</div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> reply.Success &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> reply.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\t\t\t\t\trf.currentTerm = reply.Term</div><div class=\"line\">\t\t\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"server对AppendEntries-RPC的处理\"><a href=\"#server对AppendEntries-RPC的处理\" class=\"headerlink\" title=\"server对AppendEntries RPC的处理\"></a>server对<code>AppendEntries RPC</code>的处理</h3><p>同样，raft中的term可以作为判断是不是最新的依据，根据Figure 2，server在处理<code>AppendEntries RPC</code>，有如下注意点：</p>\n<ul>\n<li>如果<code>args.Term &lt; rf.currentTerm</code>，<code>reply.Term = rf.currentTerm</code>;</li>\n<li>如果<code>args.Term &gt; rf.currentTerm</code>，更新当前的term并且将状态改变为FOLLOWER（针对当前状态为CANDIDATE的server）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">AppendEntries</span><span class=\"params\">(args *AppendEntriesArgs, reply *AppendEntriesReply)</span></span> &#123;</div><div class=\"line\">\trf.mu.Lock()</div><div class=\"line\">\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t<span class=\"comment\">//deal with the msg and reply</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> args.Term &lt; rf.currentTerm &#123;</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">false</span></div><div class=\"line\">\t\treply.Term = rf.currentTerm</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> args.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\trf.currentTerm = args.Term</div><div class=\"line\">\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\trf.appendCh &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"状态转变的函数\"><a href=\"#状态转变的函数\" class=\"headerlink\" title=\"状态转变的函数\"></a>状态转变的函数</h3><p>需要注意的是当转变成FOLLOWER时，要将自己的<code>VoteFor</code>初始化为-1，当转变成CANDIDATE时候要注意开始选举LEADER<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">updateStateTo</span><span class=\"params\">(state <span class=\"keyword\">int32</span>)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> rf.isState(state) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tstateDesc := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"FOLLOWER\"</span>, <span class=\"string\">\"CANDIDATE\"</span>, <span class=\"string\">\"LEADER\"</span>&#125;</div><div class=\"line\">\tpreState := rf.state</div><div class=\"line\">\t<span class=\"keyword\">switch</span> state &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> FOLLOWER:</div><div class=\"line\">\t\trf.state = FOLLOWER</div><div class=\"line\">\t\trf.votedFor = <span class=\"number\">-1</span></div><div class=\"line\">\t<span class=\"keyword\">case</span> CANDIDATE:</div><div class=\"line\">\t\trf.state = CANDIDATE</div><div class=\"line\">\t\trf.startElection()</div><div class=\"line\">\t<span class=\"keyword\">case</span> LEADER:</div><div class=\"line\">\t\trf.state = LEADER</div><div class=\"line\">\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Warning: invalid state %d, do nothing.\\n\"</span>, state)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"In term %d: Server %d transfer from %s to %s\\n\"</span>,</div><div class=\"line\">\t\trf.currentTerm, rf.me, stateDesc[preState], stateDesc[rf.state])</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"开始新一轮选举的函数\"><a href=\"#开始新一轮选举的函数\" class=\"headerlink\" title=\"开始新一轮选举的函数\"></a>开始新一轮选举的函数</h3><p>按照论文的要求在开始选举新的LEADER的时候要重置计时器，因为CANDIDATE会为自己投票所以票数初始置为1<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">startElection</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\trf.incrementTerm()  <span class=\"comment\">//first increase current term</span></div><div class=\"line\">\trf.votedFor = rf.me <span class=\"comment\">//vote for self</span></div><div class=\"line\">\trf.voteAcquired = <span class=\"number\">1</span> <span class=\"comment\">//acquire self's vote</span></div><div class=\"line\">\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\trf.broadcastVoteReq()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"整个状态的循环实现\"><a href=\"#整个状态的循环实现\" class=\"headerlink\" title=\"整个状态的循环实现\"></a>整个状态的循环实现</h4><p>不断的循环，并根据当前server的角色进行不同的操作</p>\n<h4 id=\"FOLLOWER\"><a href=\"#FOLLOWER\" class=\"headerlink\" title=\"FOLLOWER\"></a>FOLLOWER</h4><ul>\n<li>当收到CANDIDATE发送的<code>VoteRequest RPC</code>时，重置计时器</li>\n<li>当收到LEADER发送的<code>AppendEntries RPC</code>时，重置计时器</li>\n<li>当计时器结束时，说明当前的server断绝联系，于是FOLLOWER转变为CANDIDATE开始新一轮的选举</li>\n</ul>\n<h4 id=\"CANDIDATE\"><a href=\"#CANDIDATE\" class=\"headerlink\" title=\"CANDIDATE\"></a>CANDIDATE</h4><ul>\n<li>在收到<code>AppendEntries RPC</code>时，说明LEADER依旧存在，停止选举转变为FOLLOWER</li>\n<li>当计时器结束时，重新开始选举</li>\n<li>当投票数大于总数的一半时，当选LEADER</li>\n</ul>\n<h4 id=\"LEADER\"><a href=\"#LEADER\" class=\"headerlink\" title=\"LEADER\"></a>LEADER</h4><ul>\n<li>间隔一段时间发送<code>HeartBeat</code>心跳包维持LEADER和其他的server的通信</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">startLoop</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\trf.electionTimer = time.NewTimer(randElectionDuration())</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> atomic.LoadInt32(&amp;rf.state) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> FOLLOWER:</div><div class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.voteCh:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.appendCh:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.electionTimer.C:</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//time out</span></div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\trf.updateStateTo(CANDIDATE)</div><div class=\"line\">\t\t\t\trf.mu.Unlock()</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> CANDIDATE:</div><div class=\"line\">\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.appendCh:</div><div class=\"line\">\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.electionTimer.C:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t\trf.startElection()</div><div class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> rf.voteAcquired &gt; <span class=\"built_in\">len</span>(rf.peers)/<span class=\"number\">2</span> &#123;</div><div class=\"line\">\t\t\t\t\trf.updateStateTo(LEADER)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\trf.mu.Unlock()</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> LEADER:</div><div class=\"line\">\t\t\trf.broadcastAppendEnrties()</div><div class=\"line\">\t\t\ttime.Sleep(HEARTBEAT_INTERVAL * time.Millisecond)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"初始化并开始循环\"><a href=\"#初始化并开始循环\" class=\"headerlink\" title=\"初始化并开始循环\"></a>初始化并开始循环</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Make</span><span class=\"params\">(peers []*labrpc.ClientEnd, me <span class=\"keyword\">int</span>,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\tpersister *Persister, applyCh <span class=\"keyword\">chan</span> ApplyMsg)</span> *<span class=\"title\">Raft</span></span> &#123;</div><div class=\"line\">\trf := &amp;Raft&#123;&#125;</div><div class=\"line\">\trf.peers = peers</div><div class=\"line\">\trf.persister = persister</div><div class=\"line\">\trf.me = me</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Your initialization code here (2A, 2B, 2C).</span></div><div class=\"line\">\trf.state = FOLLOWER</div><div class=\"line\">\trf.votedFor = <span class=\"number\">-1</span></div><div class=\"line\">\trf.voteCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\">\trf.appendCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// initialize from state persisted before a crash</span></div><div class=\"line\">\trf.readPersist(persister.ReadRaftState())</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> rf.startLoop()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> rf</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><hr>\n<p>第一次将论文中的算法“实现”，虽然是参考了大神的代码，还是觉得收获满满。<br>首先，纠正了我看论文一目十行的方法，以前总觉得论文这东西太虚，只是所谓的想法，经过这次无数遍的研读之后，发现论文中的每一句话对于整个算法的执行都有至关重要的作用。因此，以后在看论文的时候，需要逐句理解，最好能够抽象出整个模型，并且思考论文这么做对于整个系统的实现有什么好处<br>其次，自己的代码的能力实在是弱的不行，我能看得懂这些代码，并能在脑中把每一个函数链接起来，但是距离完全靠自己的能力去实现一个这样的系统还有相当长的路要走。<br>希望能坚持将自己所看的论文、方法都能用自己的话去说出来，加深下理解。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本次的实验为MIT6.824 Distribute System 中 Lab2 raft part A,通过课程所给的代码的骨架，要求实验raft中选举部分的功能。由于我的水平较渣，觉得课程的难度较大，与其说是实验比如说是对Github上的大神的代码进行理解，并结合论文进行思考。希望有朝一日能够自己做出一个实验啊！</p>\n<blockquote>\n<p>Implement leader election and heartbeats (<code>AppendEntries</code> RPCs with no log entries). The goal for Part 2A is for a single leader to be elected, for the leader to remain the leader if there are no failures, and for a new leader to take over if the old leader fails or if packets to/from the old leader are lost. Run <code>go test -run 2A</code> to test your 2A code.</p>\n</blockquote>\n<p>Part A 部分要求实现raft的选举功能，其中raft中的每一个server都会维护自己的一个raft的结构体，其中只有两种RPC：<code>AppendEntries RPC</code> 和 <code>RequestVote RPC</code>。其中当<code>AppendEntres RPC</code>中的log为空时用作<code>HeartBeat</code>维护server 和 follower之间的通信，而<code>RequestVote RPC</code>则用作当follower转变成candidate时，向其他的server请求投票时的通信。整个选举的过程可以概括为下面的这张图，而其中又有许多的细节需要结合论文中的Figure 2中的每一个条件实现；</p>\n<img src=\"/2017/10/22/Raft-PartA/election.png\" alt=\"election\" title=\"election\">\n<h2 id=\"可以概括为如下几个步骤\"><a href=\"#可以概括为如下几个步骤\" class=\"headerlink\" title=\"可以概括为如下几个步骤\"></a>可以概括为如下几个步骤</h2><ol>\n<li>系统初始化时，所有的server都是FLLOWER状态,并维护一个计时器，计时结束会成为CANDIDATE并开始选举；FOLLOWER每当收到一次<code>Herat Beat</code>或<code>RequestVote RPC</code>时重置计时器；</li>\n<li>CANDIDATE在选举的时候依旧会维护一个计时器向所有的SERVER发送<code>Request Vote</code>，在结束时仍未选举完，重新开始选举。当CANDIDATE获得大部分的投票后变为LEADER;在选举的过程中若收到来自更新的term的<code>AppendEntries RPC</code>或者自己的term小于其他server的term时，转变为FOLLOWER；</li>\n<li>LEADER开始广播<code>Heart Beat</code>包，广播自己成为LEADER的事实，并且维护和FOLLOWER之间的通信。当发现FOLLOWER的reply中有更高的term时转变为FOLLOWER；</li>\n</ol>\n<h2 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h2><h3 id=\"定义一些常量\"><a href=\"#定义一些常量\" class=\"headerlink\" title=\"定义一些常量\"></a>定义一些常量</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tFOLLOWER = <span class=\"literal\">iota</span></div><div class=\"line\">\tCANDIDATE</div><div class=\"line\">\tLEADER</div><div class=\"line\"></div><div class=\"line\">\tHEARTBEAT_INTERVAL    = <span class=\"number\">100</span></div><div class=\"line\">\tMIN_ELECTION_INTERVAL = <span class=\"number\">400</span></div><div class=\"line\">\tMAX_ELECTION_INTERVAL = <span class=\"number\">500</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h3 id=\"创建必要的结构体\"><a href=\"#创建必要的结构体\" class=\"headerlink\" title=\"创建必要的结构体\"></a>创建必要的结构体</h3><p>raft相当于server中的state machine<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Raft <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tmu        sync.Mutex          <span class=\"comment\">// Lock to protect shared access to this peer's state</span></div><div class=\"line\">\tpeers     []*labrpc.ClientEnd <span class=\"comment\">// RPC end points of all peers</span></div><div class=\"line\">\tpersister *Persister          <span class=\"comment\">// Object to hold this peer's persisted state</span></div><div class=\"line\">\tme        <span class=\"keyword\">int</span>                 <span class=\"comment\">// this peer's index into peers[]</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Your data here (2A, 2B, 2C).</span></div><div class=\"line\">\t<span class=\"comment\">// Look at the paper's Figure 2 for a description of what</span></div><div class=\"line\">\t<span class=\"comment\">// state a Raft server must maintain.</span></div><div class=\"line\"></div><div class=\"line\">\tvotedFor     <span class=\"keyword\">int</span>   <span class=\"comment\">//投票给某个CANDIDATE id</span></div><div class=\"line\">\tvoteAcquired <span class=\"keyword\">int</span>   <span class=\"comment\">//收到的票数总数，用于判断能否成为LEADER</span></div><div class=\"line\">\tstate        <span class=\"keyword\">int32</span> <span class=\"comment\">//server当前的状态</span></div><div class=\"line\">\tcurrentTerm  <span class=\"keyword\">int32</span> <span class=\"comment\">//server当前的term</span></div><div class=\"line\"></div><div class=\"line\">\tvoteCh   <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">//由于是并行发送用于指示server收到VoteRequest后的操作</span></div><div class=\"line\">\tappendCh <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">//收到Append Entries后的操作</span></div><div class=\"line\"></div><div class=\"line\">\telectionTimer *time.Timer <span class=\"comment\">//用于FOLLOWER和CANDIDATE的操作</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送<code>RequestVote RPC</code>包中的内容<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RequestVoteArgs <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm        <span class=\"keyword\">int32</span></div><div class=\"line\">\tCandidateId <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>server对于<code>RequestVote RPC</code>包的回复<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RequestVoteReply <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Your data here (2A).</span></div><div class=\"line\">\tTerm        <span class=\"keyword\">int32</span></div><div class=\"line\">\tVoteGranted <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送<code>AppendEntries RPC</code>包中的内容<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//此处只涉及选举，不考虑replication及log中的内容</span></div><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesArgs <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm     <span class=\"keyword\">int32</span></div><div class=\"line\">\tLeaderID <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接收<code>AppendEntries RPC</code>包，并回复<br>同样这里不考虑CANDIDATE中的log是否是最新的，只要有合适的<code>VoteReuest PRC</code>就投票<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesReply <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tTerm    <span class=\"keyword\">int32</span></div><div class=\"line\">\tSuccess <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>###一些重要的工具函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">getTerm</span><span class=\"params\">()</span> <span class=\"title\">int32</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.LoadInt32(&amp;rf.currentTerm)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">incrementTerm</span><span class=\"params\">()</span> <span class=\"title\">int32</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.AddInt32(&amp;rf.currentTerm, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">isState</span><span class=\"params\">(state <span class=\"keyword\">int32</span>)</span> <span class=\"title\">bool</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> atomic.LoadInt32(&amp;rf.state) == state</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">GetState</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>)</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> term <span class=\"keyword\">int</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> isleader <span class=\"keyword\">bool</span></div><div class=\"line\">\t<span class=\"comment\">// Your code here (2A).</span></div><div class=\"line\">\tterm = <span class=\"keyword\">int</span>(rf.getTerm())</div><div class=\"line\">\tisleader = rf.isState(LEADER)</div><div class=\"line\">\t<span class=\"keyword\">return</span> term, isleader</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">randElectionDuration</span><span class=\"params\">()</span> <span class=\"title\">time</span>.<span class=\"title\">Duration</span></span> &#123;</div><div class=\"line\">\tr := rand.New(rand.NewSource(time.Now().UnixNano()))</div><div class=\"line\">\t<span class=\"keyword\">return</span> time.Millisecond * time.Duration(</div><div class=\"line\">    \t\t\tr.Int63n(MAX_ELECTION_INTERVAL-MIN_ELECTION_INTERVAL)+MIN_ELECTION_INTERVAL</div><div class=\"line\">       \t)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"CANDIDATE发送RequestVote-RPC包\"><a href=\"#CANDIDATE发送RequestVote-RPC包\" class=\"headerlink\" title=\"CANDIDATE发送RequestVote RPC包\"></a>CANDIDATE发送<code>RequestVote RPC</code>包</h3><p>用于CANDIDATE发送包和对reply的处理</p>\n<ul>\n<li>遍历每一个server，若投票了则voteGranted自增1</li>\n<li>若发现reply中的term大于自身当前的term，则转变为FOLLOWER</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">broadcastVoteReq</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\targs := RequestVoteArgs&#123;Term: atomic.LoadInt32(&amp;rf.currentTerm), CandidateId: rf.me&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> rf.peers &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> i == rf.me &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// is it is candidate then send vote req</span></div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(server <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> reply RequestVoteReply</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> rf.isState(CANDIDATE) &amp;&amp; rf.sendRequestVote(server, &amp;args, &amp;reply) &#123;</div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//deal with the reply</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> reply.VoteGranted &#123;</div><div class=\"line\">\t\t\t\t\trf.voteAcquired += <span class=\"number\">1</span></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> reply.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\t\t\t\t\trf.currentTerm = reply.Term</div><div class=\"line\">\t\t\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tfmt.Printf(<span class=\"string\">\"Server %d send vote req failed.\\n\"</span>, rf.me)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"server对RequestVote-RPC的处理\"><a href=\"#server对RequestVote-RPC的处理\" class=\"headerlink\" title=\"server对RequestVote RPC的处理\"></a>server对<code>RequestVote RPC</code>的处理</h3><p>依据论文Figure 2中的要求，有以下几个处理的要点：</p>\n<ul>\n<li>判断自身的term是否大于CANDIDATE的term，若是则拒绝投票，并更新reply中的term</li>\n<li>若当前的term小于CANDIDATE发送的term，更新自身的term，并将自己的状态变为follower（当前状态为CANDIDATE或LEADER）</li>\n<li>当两者的term相等时，必须是初始状态，否则拒绝投票（FOLLOWER转变为CANDIDATE时候term自增1，因此必须大于其他server）</li>\n<li>投票成功后，利用信道通知主循环（整个操作是并行的）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">RequestVote</span><span class=\"params\">(args *RequestVoteArgs, reply *RequestVoteReply)</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// Your code here (2A, 2B).</span></div><div class=\"line\">\trf.mu.Lock()</div><div class=\"line\">\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t<span class=\"keyword\">if</span> args.Term &lt; rf.currentTerm &#123;</div><div class=\"line\">\t\treply.VoteGranted = <span class=\"literal\">false</span></div><div class=\"line\">\t\treply.Term = rf.currentTerm</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> args.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\trf.currentTerm = args.Term</div><div class=\"line\">\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\trf.votedFor = args.CandidateId</div><div class=\"line\">\t\treply.VoteGranted = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> rf.votedFor == <span class=\"number\">-1</span> &#123;</div><div class=\"line\">\t\t\trf.votedFor = args.CandidateId</div><div class=\"line\">\t\t\treply.VoteGranted = <span class=\"literal\">true</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\treply.VoteGranted = <span class=\"literal\">false</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> reply.VoteGranted == <span class=\"literal\">true</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; rf.voteCh &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125; &#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"LEADER广播AppendEntries-RPC，和对reply的处理\"><a href=\"#LEADER广播AppendEntries-RPC，和对reply的处理\" class=\"headerlink\" title=\"LEADER广播AppendEntries RPC，和对reply的处理\"></a>LEADER广播<code>AppendEntries RPC</code>，和对reply的处理</h3><p>由于这里只是单纯的选举所以处理的逻辑很简单，只处理失败的回复：</p>\n<ul>\n<li>如果reply中的term大于当前LEADER中的term，则LEADER将自己的状态变成FOLLOWER</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">broadcastAppendEnrties</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\targs := AppendEntriesArgs&#123;Term: atomic.LoadInt32(&amp;rf.currentTerm), LeaderID: rf.me&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> rf.peers &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> i == rf.me &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(server <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> reply AppendEntriesReply</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> rf.isState(LEADER) &amp;&amp; rf.sendAppendEntries(server, &amp;args, &amp;reply) &#123;</div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> reply.Success &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> reply.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\t\t\t\t\trf.currentTerm = reply.Term</div><div class=\"line\">\t\t\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"server对AppendEntries-RPC的处理\"><a href=\"#server对AppendEntries-RPC的处理\" class=\"headerlink\" title=\"server对AppendEntries RPC的处理\"></a>server对<code>AppendEntries RPC</code>的处理</h3><p>同样，raft中的term可以作为判断是不是最新的依据，根据Figure 2，server在处理<code>AppendEntries RPC</code>，有如下注意点：</p>\n<ul>\n<li>如果<code>args.Term &lt; rf.currentTerm</code>，<code>reply.Term = rf.currentTerm</code>;</li>\n<li>如果<code>args.Term &gt; rf.currentTerm</code>，更新当前的term并且将状态改变为FOLLOWER（针对当前状态为CANDIDATE的server）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">AppendEntries</span><span class=\"params\">(args *AppendEntriesArgs, reply *AppendEntriesReply)</span></span> &#123;</div><div class=\"line\">\trf.mu.Lock()</div><div class=\"line\">\t<span class=\"keyword\">defer</span> rf.mu.Unlock()</div><div class=\"line\">\t<span class=\"comment\">//deal with the msg and reply</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> args.Term &lt; rf.currentTerm &#123;</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">false</span></div><div class=\"line\">\t\treply.Term = rf.currentTerm</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> args.Term &gt; rf.currentTerm &#123;</div><div class=\"line\">\t\trf.currentTerm = args.Term</div><div class=\"line\">\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\treply.Success = <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\trf.appendCh &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"状态转变的函数\"><a href=\"#状态转变的函数\" class=\"headerlink\" title=\"状态转变的函数\"></a>状态转变的函数</h3><p>需要注意的是当转变成FOLLOWER时，要将自己的<code>VoteFor</code>初始化为-1，当转变成CANDIDATE时候要注意开始选举LEADER<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">updateStateTo</span><span class=\"params\">(state <span class=\"keyword\">int32</span>)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> rf.isState(state) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tstateDesc := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"FOLLOWER\"</span>, <span class=\"string\">\"CANDIDATE\"</span>, <span class=\"string\">\"LEADER\"</span>&#125;</div><div class=\"line\">\tpreState := rf.state</div><div class=\"line\">\t<span class=\"keyword\">switch</span> state &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> FOLLOWER:</div><div class=\"line\">\t\trf.state = FOLLOWER</div><div class=\"line\">\t\trf.votedFor = <span class=\"number\">-1</span></div><div class=\"line\">\t<span class=\"keyword\">case</span> CANDIDATE:</div><div class=\"line\">\t\trf.state = CANDIDATE</div><div class=\"line\">\t\trf.startElection()</div><div class=\"line\">\t<span class=\"keyword\">case</span> LEADER:</div><div class=\"line\">\t\trf.state = LEADER</div><div class=\"line\">\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Warning: invalid state %d, do nothing.\\n\"</span>, state)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"In term %d: Server %d transfer from %s to %s\\n\"</span>,</div><div class=\"line\">\t\trf.currentTerm, rf.me, stateDesc[preState], stateDesc[rf.state])</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"开始新一轮选举的函数\"><a href=\"#开始新一轮选举的函数\" class=\"headerlink\" title=\"开始新一轮选举的函数\"></a>开始新一轮选举的函数</h3><p>按照论文的要求在开始选举新的LEADER的时候要重置计时器，因为CANDIDATE会为自己投票所以票数初始置为1<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">startElection</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\trf.incrementTerm()  <span class=\"comment\">//first increase current term</span></div><div class=\"line\">\trf.votedFor = rf.me <span class=\"comment\">//vote for self</span></div><div class=\"line\">\trf.voteAcquired = <span class=\"number\">1</span> <span class=\"comment\">//acquire self's vote</span></div><div class=\"line\">\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\trf.broadcastVoteReq()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"整个状态的循环实现\"><a href=\"#整个状态的循环实现\" class=\"headerlink\" title=\"整个状态的循环实现\"></a>整个状态的循环实现</h4><p>不断的循环，并根据当前server的角色进行不同的操作</p>\n<h4 id=\"FOLLOWER\"><a href=\"#FOLLOWER\" class=\"headerlink\" title=\"FOLLOWER\"></a>FOLLOWER</h4><ul>\n<li>当收到CANDIDATE发送的<code>VoteRequest RPC</code>时，重置计时器</li>\n<li>当收到LEADER发送的<code>AppendEntries RPC</code>时，重置计时器</li>\n<li>当计时器结束时，说明当前的server断绝联系，于是FOLLOWER转变为CANDIDATE开始新一轮的选举</li>\n</ul>\n<h4 id=\"CANDIDATE\"><a href=\"#CANDIDATE\" class=\"headerlink\" title=\"CANDIDATE\"></a>CANDIDATE</h4><ul>\n<li>在收到<code>AppendEntries RPC</code>时，说明LEADER依旧存在，停止选举转变为FOLLOWER</li>\n<li>当计时器结束时，重新开始选举</li>\n<li>当投票数大于总数的一半时，当选LEADER</li>\n</ul>\n<h4 id=\"LEADER\"><a href=\"#LEADER\" class=\"headerlink\" title=\"LEADER\"></a>LEADER</h4><ul>\n<li>间隔一段时间发送<code>HeartBeat</code>心跳包维持LEADER和其他的server的通信</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rf *Raft)</span> <span class=\"title\">startLoop</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\trf.electionTimer = time.NewTimer(randElectionDuration())</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> atomic.LoadInt32(&amp;rf.state) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> FOLLOWER:</div><div class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.voteCh:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.appendCh:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.electionTimer.C:</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//time out</span></div><div class=\"line\">\t\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t\trf.updateStateTo(CANDIDATE)</div><div class=\"line\">\t\t\t\trf.mu.Unlock()</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> CANDIDATE:</div><div class=\"line\">\t\t\trf.mu.Lock()</div><div class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.appendCh:</div><div class=\"line\">\t\t\t\trf.updateStateTo(FOLLOWER)</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-rf.electionTimer.C:</div><div class=\"line\">\t\t\t\trf.electionTimer.Reset(randElectionDuration())</div><div class=\"line\">\t\t\t\trf.startElection()</div><div class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> rf.voteAcquired &gt; <span class=\"built_in\">len</span>(rf.peers)/<span class=\"number\">2</span> &#123;</div><div class=\"line\">\t\t\t\t\trf.updateStateTo(LEADER)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\trf.mu.Unlock()</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> LEADER:</div><div class=\"line\">\t\t\trf.broadcastAppendEnrties()</div><div class=\"line\">\t\t\ttime.Sleep(HEARTBEAT_INTERVAL * time.Millisecond)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"初始化并开始循环\"><a href=\"#初始化并开始循环\" class=\"headerlink\" title=\"初始化并开始循环\"></a>初始化并开始循环</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Make</span><span class=\"params\">(peers []*labrpc.ClientEnd, me <span class=\"keyword\">int</span>,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\tpersister *Persister, applyCh <span class=\"keyword\">chan</span> ApplyMsg)</span> *<span class=\"title\">Raft</span></span> &#123;</div><div class=\"line\">\trf := &amp;Raft&#123;&#125;</div><div class=\"line\">\trf.peers = peers</div><div class=\"line\">\trf.persister = persister</div><div class=\"line\">\trf.me = me</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Your initialization code here (2A, 2B, 2C).</span></div><div class=\"line\">\trf.state = FOLLOWER</div><div class=\"line\">\trf.votedFor = <span class=\"number\">-1</span></div><div class=\"line\">\trf.voteCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\">\trf.appendCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// initialize from state persisted before a crash</span></div><div class=\"line\">\trf.readPersist(persister.ReadRaftState())</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> rf.startLoop()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> rf</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><hr>\n<p>第一次将论文中的算法“实现”，虽然是参考了大神的代码，还是觉得收获满满。<br>首先，纠正了我看论文一目十行的方法，以前总觉得论文这东西太虚，只是所谓的想法，经过这次无数遍的研读之后，发现论文中的每一句话对于整个算法的执行都有至关重要的作用。因此，以后在看论文的时候，需要逐句理解，最好能够抽象出整个模型，并且思考论文这么做对于整个系统的实现有什么好处<br>其次，自己的代码的能力实在是弱的不行，我能看得懂这些代码，并能在脑中把每一个函数链接起来，但是距离完全靠自己的能力去实现一个这样的系统还有相当长的路要走。<br>希望能坚持将自己所看的论文、方法都能用自己的话去说出来，加深下理解。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Raft-PartA/election.png","post":"cj92t4mnm0000u0d7gf80v1fj","slug":"election.png","modified":1,"renderable":1},{"_id":"source/_posts/Raft-PartA/raft.png","post":"cj92t4mnm0000u0d7gf80v1fj","slug":"raft.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj92t4mnm0000u0d7gf80v1fj","category_id":"cj92t4mnv0003u0d7gfi6sz0w","_id":"cj92t4mo30009u0d7wn0xgj4f"},{"post_id":"cj92t4mnm0000u0d7gf80v1fj","category_id":"cj92t4mo10006u0d7031pd0cu","_id":"cj92t4mo4000au0d7k7wzipqe"}],"PostTag":[{"post_id":"cj92t4mnm0000u0d7gf80v1fj","tag_id":"cj92t4mnx0004u0d7dyitd7l6","_id":"cj92t4mo20007u0d7xbmp6blu"},{"post_id":"cj92t4mnm0000u0d7gf80v1fj","tag_id":"cj92t4mnz0005u0d78rea4dyh","_id":"cj92t4mo20008u0d7qx4n92qb"}],"Tag":[{"name":"raft","_id":"cj92t4mnx0004u0d7dyitd7l6"},{"name":"golang","_id":"cj92t4mnz0005u0d78rea4dyh"}]}}